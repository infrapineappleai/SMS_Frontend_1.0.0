{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\SMS Final Final Code K\\\\Frontend\\\\src\\\\sections\\\\payments\\\\PaymentList.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport '../../Styles/payment/Payment.css';\nimport eyeIcon from '../../assets/icons/Eye.png';\nimport filterIcon from '../../assets/icons/filter2.png';\nimport PaymentDetailsModal from '../payments/models/PaymentDetailsModal';\nimport PaymentSuccessModal from '../payments/models/SuccesPaymentModel';\nimport Receipt from './Recipt';\nimport Step1StudentsDetails from '../payments/stepper/Step1StudentsDetails';\nimport Step2Courses from '../payments/stepper/Step2Courses';\nimport Step3PaymentInfo from '../payments/stepper/Step3PaymentInfo';\nimport StepperHeader from '../payments/stepper/StepperHeader';\nimport PendingModal from '../payments/models/PendingModal';\nimport { parse, format, isValid } from 'date-fns';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = \"https://aradanabeta.pineappleai.cloud/api/sms/api\";\nconst PaymentTable = ({\n  selectedState: propSelectedState = 'State'\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedPayment, setSelectedPayment] = useState(null);\n  const [isStepperOpen, setIsStepperOpen] = useState(false);\n  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);\n  const [isReceiptOpen, setIsReceiptOpen] = useState(false);\n  const [receiptData, setReceiptData] = useState(null);\n  const [selectedState, setSelectedState] = useState(propSelectedState);\n  const [selectedStatus, setSelectedStatus] = useState('All');\n  const [isStateDropdownOpen, setIsStateDropdownOpen] = useState(false);\n  const [isStatusDropdownOpen, setIsStatusDropdownOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const stateDropdownRef = useRef(null);\n  const statusDropdownRef = useRef(null);\n  const [payments, setPayments] = useState([]);\n  const [originalPayments, setOriginalPayments] = useState([]);\n  const [isPendingModalOpen, setIsPendingModalOpen] = useState(false);\n  const [paymentHistories, setPaymentHistories] = useState({});\n  const forceRefresh = () => {\n    setRefreshKey(prev => prev + 1);\n  };\n  const formatDate = (dateStr, paymentId) => {\n    if (!dateStr) {\n      console.warn(`dateStr is undefined or null for payment ${paymentId}, using current date`);\n      return format(new Date(), 'yyyy-MM-dd');\n    }\n    let date;\n    if (dateStr instanceof Date) {\n      date = dateStr;\n    } else {\n      date = parse(dateStr, 'dd/MM/yyyy', new Date());\n      if (!isValid(date)) {\n        date = new Date(dateStr);\n        if (!isValid(date)) {\n          console.warn(`Invalid payDate for payment ${paymentId}: ${dateStr}, using current date`);\n          date = new Date();\n        }\n      }\n    }\n    return format(date, 'yyyy-MM-dd');\n  };\n  useEffect(() => {\n    const fetchPayments = async () => {\n      try {\n        setIsLoading(true);\n        setOriginalPayments([]);\n        setPayments([]);\n        const response = await axios.get(API_BASE_URL + '/searchmain', {\n          params: {\n            state: selectedState !== 'State' ? selectedState : undefined,\n            status: selectedStatus !== 'All' ? selectedStatus : undefined,\n            _t: Date.now()\n          }\n        });\n        if (Array.isArray(response.data)) {\n          setOriginalPayments(response.data);\n          setPayments(response.data);\n          const histories = {};\n          await Promise.all(response.data.map(async payment => {\n            if (payment.student_details_id) {\n              try {\n                const historyResponse = await axios.get(API_BASE_URL + `/payment-history/${payment.student_details_id}`);\n                histories[payment.student_details_id] = historyResponse.data.pendingHistory || [];\n                console.log(`Payment history for student ${payment.student_details_id}:`, historyResponse.data.pendingHistory);\n              } catch (err) {\n                var _err$response;\n                console.warn(`No payment history for student ${payment.student_details_id}:`, ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n                histories[payment.student_details_id] = [];\n              }\n            }\n          }));\n          setPaymentHistories(histories);\n          console.log('Fetched payments:', response.data);\n          console.log('Payment histories:', histories);\n        } else {\n          console.error('API response is not an array:', response.data);\n        }\n      } catch (err) {\n        var _err$response2, _err$response3;\n        console.error('Error fetching payments:', (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status, ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err.message);\n        alert('Failed to load payments. Please try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchPayments();\n  }, [selectedState, selectedStatus, refreshKey]);\n  useEffect(() => {\n    const fetchSearchResults = async () => {\n      if (searchQuery.trim() === '') {\n        forceRefresh();\n        return;\n      }\n      try {\n        setIsLoading(true);\n        const response = await axios.get(API_BASE_URL + '/filterstatus/search', {\n          params: {\n            status: selectedStatus !== 'All' ? selectedStatus.toLowerCase() : undefined,\n            search: searchQuery,\n            _t: Date.now()\n          }\n        });\n        setOriginalPayments(response.data);\n        setPayments(response.data);\n        const histories = {};\n        await Promise.all(response.data.map(async payment => {\n          if (payment.student_details_id) {\n            const historyResponse = await axios.get(API_BASE_URL + `/payment-history/${payment.student_details_id}`);\n            histories[payment.student_details_id] = historyResponse.data.pendingHistory || [];\n          }\n        }));\n        setPaymentHistories(histories);\n      } catch (err) {\n        var _err$response4, _err$response5;\n        console.error('Error fetching search results:', (_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.status, ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : _err$response5.data) || err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const timeoutId = setTimeout(fetchSearchResults, 3000);\n    return () => clearTimeout(timeoutId);\n  }, [searchQuery, selectedStatus]);\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (stateDropdownRef.current && !stateDropdownRef.current.contains(event.target)) {\n        setIsStateDropdownOpen(false);\n      }\n      if (statusDropdownRef.current && !statusDropdownRef.current.contains(event.target)) {\n        setIsStatusDropdownOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n  const handleAddPayment = () => {\n    setIsStepperOpen(true);\n  };\n  const handleStateDropdownToggle = () => {\n    setIsStateDropdownOpen(!isStateDropdownOpen);\n    setIsStatusDropdownOpen(false);\n  };\n  const handleStatusDropdownToggle = () => {\n    setIsStatusDropdownOpen(!isStatusDropdownOpen);\n    setIsStateDropdownOpen(false);\n  };\n  const handleStateSelect = state => {\n    setSelectedState(state.value);\n    setIsStateDropdownOpen(false);\n    forceRefresh();\n  };\n  const handleStatusSelect = status => {\n    setSelectedStatus(status.value);\n    setIsStatusDropdownOpen(false);\n    forceRefresh();\n  };\n  const handleIconClick = (action, paymentId) => {\n    const payment = payments.find(p => p.id === paymentId);\n    if (payment) {\n      if (action === 'View') {\n        const pendingHistory = paymentHistories[payment.student_details_id] || [];\n        setSelectedPayment({\n          ...payment,\n          selectedStatus,\n          pendingHistory\n        });\n        if (selectedStatus === 'Pending') {\n          setIsPendingModalOpen(true);\n        } else {\n          setIsModalOpen(true);\n        }\n      }\n    } else {\n      console.warn(`Payment with id ${paymentId} not found`);\n    }\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedPayment(null);\n    forceRefresh();\n  };\n  const closePendingModal = () => {\n    setIsPendingModalOpen(false);\n    setSelectedPayment(null);\n    forceRefresh();\n  };\n  const closeStepper = () => {\n    setIsStepperOpen(false);\n  };\n  const closeSuccessModal = () => {\n    setIsSuccessModalOpen(false);\n    setReceiptData(null);\n  };\n  const handlePaymentSuccess = async data => {\n    console.log('Payment Success Data:', data);\n    try {\n      setIsLoading(true);\n      const newPayment = {\n        full_name: data.fullName || data.studentName || 'N/A',\n        student_no: data.studentId || `STU_${Date.now()}`,\n        course: data.course || 'Violin',\n        payDate: formatDate(data.date || new Date().toLocaleDateString('en-GB', {\n          timeZone: 'Asia/Colombo'\n        }), 'new_payment'),\n        amount: parseInt(data.totalAmount) || parseInt(data.amount) || 4000,\n        status: data.status || 'Paid',\n        branch_name: data.location || 'N/A',\n        student_details_id: data.student_details_id || data.studentId,\n        course_fees: data.course_fees || {},\n        selectedMonths: data.selectedMonths || []\n      };\n      const isDuplicate = originalPayments.some(p => p.id === newPayment.id || p.student_no === newPayment.student_no && p.full_name === newPayment.full_name && p.payDate === newPayment.payDate);\n      if (!isDuplicate) {\n        var _newPayment$selectedM, _data$selectedMonths;\n        const newReceiptData = {\n          student_no: newPayment.student_no || data.studentId || `STU_${Date.now()}`,\n          full_name: newPayment.full_name || data.fullName || data.studentName || 'N/A',\n          branch_name: newPayment.branch_name || data.location || 'N/A',\n          course_fees: newPayment.course_fees || data.course_fees || {},\n          total_course_fees: parseInt(data.monthlyFee || data.amount) || 0,\n          admission_fee: parseInt(data.admissionFee) || 0,\n          total_fees: parseInt(data.totalAmount || data.amount) || 0,\n          date: formatDate(newPayment.payDate, newPayment.id || 'new_payment'),\n          paidFor: ((_newPayment$selectedM = newPayment.selectedMonths) === null || _newPayment$selectedM === void 0 ? void 0 : _newPayment$selectedM.join(', ')) || data.paidFor || ((_data$selectedMonths = data.selectedMonths) === null || _data$selectedMonths === void 0 ? void 0 : _data$selectedMonths.join(', ')) || 'N/A',\n          selectedMonths: newPayment.selectedMonths || data.selectedMonths || []\n        };\n        setOriginalPayments(prev => [...prev, newPayment].sort((a, b) => new Date(formatDate(b.payDate || b.payment_date, b.id)) - new Date(formatDate(a.payDate || a.payment_date, a.id))));\n        setPayments(prev => [...prev, newPayment].sort((a, b) => new Date(formatDate(b.payDate || b.payment_date, b.id)) - new Date(formatDate(a.payDate || a.payment_date, a.id))));\n        setReceiptData(newReceiptData);\n        setIsSuccessModalOpen(true);\n        setPaymentHistories(prev => ({\n          ...prev,\n          [newPayment.student_details_id]: [...(prev[newPayment.student_details_id] || []), {\n            date: formatDate(newPayment.payDate, newPayment.id),\n            branch: newPayment.branch_name || 'N/A',\n            payment: newPayment.amount || 4000,\n            status: newPayment.status || 'Paid'\n          }]\n        }));\n        setTimeout(() => forceRefresh(), 1000);\n      } else {\n        console.warn('Duplicate payment detected, skipping addition:', newPayment);\n      }\n    } catch (error) {\n      console.error('Error processing payment:', error);\n      const newPayment = {\n        id: Date.now(),\n        name: data.fullName || data.studentName || 'N/A',\n        course: data.course || 'Violin',\n        payDate: formatDate(data.date || new Date().toLocaleDateString('en-GB', {\n          timeZone: 'Asia/Colombo'\n        }), 'fallback_payment'),\n        amount: parseInt(data.totalAmount) || parseInt(data.amount) || 4000,\n        status: data.status || 'Paid',\n        student_no: data.studentId || `STU_${Date.now()}`,\n        full_name: data.fullName || data.studentName || 'N/A',\n        student_details_id: data.student_details_id || data.studentId,\n        // Prefer student_details_id\n        course_fees: data.course_fees || {},\n        selectedMonths: data.selectedMonths || []\n      };\n      const isDuplicate = originalPayments.some(p => p.id === newPayment.id || p.student_no === newPayment.student_no && p.full_name === newPayment.full_name && p.payDate === newPayment.payDate);\n      if (!isDuplicate) {\n        var _newPayment$selectedM2, _data$selectedMonths2;\n        const newReceiptData = {\n          student_no: newPayment.student_no,\n          full_name: newPayment.full_name,\n          branch_name: data.location || 'N/A',\n          course_fees: newPayment.course_fees || data.course_fees || {},\n          total_course_fees: parseInt(data.monthlyFee || data.amount) || 0,\n          admission_fee: parseInt(data.admissionFee) || 0,\n          total_fees: parseInt(data.totalAmount || data.amount) || 0,\n          date: formatDate(newPayment.payDate, newPayment.id),\n          paidFor: ((_newPayment$selectedM2 = newPayment.selectedMonths) === null || _newPayment$selectedM2 === void 0 ? void 0 : _newPayment$selectedM2.join(', ')) || data.paidFor || ((_data$selectedMonths2 = data.selectedMonths) === null || _data$selectedMonths2 === void 0 ? void 0 : _data$selectedMonths2.join(', ')) || 'N/A',\n          selectedMonths: newPayment.selectedMonths || data.selectedMonths || []\n        };\n        setOriginalPayments(prev => [...prev, newPayment].sort((a, b) => new Date(formatDate(b.payDate || b.payment_date, b.id)) - new Date(formatDate(a.payDate || a.payment_date, a.id))));\n        setPayments(prev => [...prev, newPayment].sort((a, b) => new Date(formatDate(b.payDate || b.payment_date, b.id)) - new Date(formatDate(a.payDate || a.payment_date, a.id))));\n        setReceiptData(newReceiptData);\n        setIsSuccessModalOpen(true);\n        setPaymentHistories(prev => ({\n          ...prev,\n          [newPayment.student_details_id]: [...(prev[newPayment.student_details_id] || []), {\n            date: formatDate(newPayment.payDate, newPayment.id),\n            branch: newPayment.branch_name || 'N/A',\n            payment: newPayment.amount || 4000,\n            status: newPayment.status || 'Paid'\n          }]\n        }));\n        setTimeout(() => forceRefresh(), 1000);\n      } else {\n        console.warn('Duplicate payment detected in fallback, skipping addition:', newPayment);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleGenerateReceipt = async student_details_id => {\n    if (student_details_id && !isLoading) {\n      setIsLoading(true);\n      try {\n        var _receiptData$selected, _response$data$select, _receiptData$selected2;\n        const response = await axios.get(API_BASE_URL + `/payment/${student_details_id}`, {\n          params: {\n            months: (receiptData === null || receiptData === void 0 ? void 0 : (_receiptData$selected = receiptData.selectedMonths) === null || _receiptData$selected === void 0 ? void 0 : _receiptData$selected.join(',')) || '',\n            _t: Date.now()\n          }\n        });\n        const formattedData = {\n          full_name: response.data.full_name || (receiptData === null || receiptData === void 0 ? void 0 : receiptData.full_name) || 'N/A',\n          branch_name: response.data.branch_name || (receiptData === null || receiptData === void 0 ? void 0 : receiptData.branch_name) || 'N/A',\n          student_no: response.data.student_no || (receiptData === null || receiptData === void 0 ? void 0 : receiptData.student_no) || 'N/A',\n          course_fees: response.data.course_fees || (receiptData === null || receiptData === void 0 ? void 0 : receiptData.course_fees) || {},\n          total_course_fees: response.data.total_course_fees || (receiptData === null || receiptData === void 0 ? void 0 : receiptData.total_course_fees) || 0,\n          admission_fee: response.data.admission_fee || (receiptData === null || receiptData === void 0 ? void 0 : receiptData.admission_fee) || 0,\n          total_fees: response.data.total_fees || (receiptData === null || receiptData === void 0 ? void 0 : receiptData.total_fees) || 0,\n          date: formatDate(response.data.date || new Date().toLocaleDateString('en-GB', {\n            timeZone: 'Asia/Colombo'\n          }), 'receipt_data'),\n          paidFor: ((_response$data$select = response.data.selectedMonths) === null || _response$data$select === void 0 ? void 0 : _response$data$select.join(', ')) || (receiptData === null || receiptData === void 0 ? void 0 : receiptData.paidFor) || (receiptData === null || receiptData === void 0 ? void 0 : (_receiptData$selected2 = receiptData.selectedMonths) === null || _receiptData$selected2 === void 0 ? void 0 : _receiptData$selected2.join(', ')) || 'N/A',\n          selectedMonths: response.data.selectedMonths || (receiptData === null || receiptData === void 0 ? void 0 : receiptData.selectedMonths) || []\n        };\n        setReceiptData(formattedData);\n        setIsReceiptOpen(true);\n        setIsSuccessModalOpen(false);\n      } catch (error) {\n        var _error$response, _error$response2, _receiptData$selected3;\n        console.error('Error fetching receipt data for student_details_id:', student_details_id, (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n        alert('Failed to fetch receipt data. Using cached or default values.');\n        const formattedData = {\n          full_name: (receiptData === null || receiptData === void 0 ? void 0 : receiptData.full_name) || 'N/A',\n          branch_name: (receiptData === null || receiptData === void 0 ? void 0 : receiptData.branch_name) || 'N/A',\n          student_no: (receiptData === null || receiptData === void 0 ? void 0 : receiptData.student_no) || 'N/A',\n          course_fees: (receiptData === null || receiptData === void 0 ? void 0 : receiptData.course_fees) || {},\n          total_course_fees: (receiptData === null || receiptData === void 0 ? void 0 : receiptData.total_course_fees) || 0,\n          admission_fee: (receiptData === null || receiptData === void 0 ? void 0 : receiptData.admission_fee) || 0,\n          total_fees: (receiptData === null || receiptData === void 0 ? void 0 : receiptData.total_fees) || 0,\n          date: formatDate((receiptData === null || receiptData === void 0 ? void 0 : receiptData.date) || new Date().toLocaleDateString('en-GB', {\n            timeZone: 'Asia/Colombo'\n          }), 'receipt_fallback'),\n          paidFor: (receiptData === null || receiptData === void 0 ? void 0 : receiptData.paidFor) || (receiptData === null || receiptData === void 0 ? void 0 : (_receiptData$selected3 = receiptData.selectedMonths) === null || _receiptData$selected3 === void 0 ? void 0 : _receiptData$selected3.join(', ')) || 'N/A',\n          selectedMonths: (receiptData === null || receiptData === void 0 ? void 0 : receiptData.selectedMonths) || []\n        };\n        setReceiptData(formattedData);\n        setIsReceiptOpen(true);\n        setIsSuccessModalOpen(false);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  const closeReceipt = () => {\n    setIsReceiptOpen(false);\n    setReceiptData(null);\n  };\n  const getFilteredPayments = () => {\n    const currentDate = new Date();\n    const currentMonthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const dueDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 10);\n    const isBeforeDueDate = currentDate <= dueDate;\n    const groupedPayments = payments.reduce((acc, payment) => {\n      const studentNo = payment.student_details_id || `unknown_${payment.id}`;\n      const originalPayment = originalPayments.find(p => p.id === payment.id) || payment;\n      if (!acc[studentNo]) {\n        acc[studentNo] = {\n          ...payment,\n          originalStatus: originalPayment.status,\n          originalAmount: originalPayment.amount || 4000\n        };\n      } else {\n        const existingDate = new Date(formatDate(acc[studentNo].payDate || acc[studentNo].payment_date || '1970-01-01', acc[studentNo].id));\n        const currentDate = new Date(formatDate(payment.payDate || payment.payment_date || '1970-01-01', payment.id));\n        if (currentDate > existingDate) {\n          acc[studentNo] = {\n            ...payment,\n            originalStatus: originalPayment.status,\n            originalAmount: originalPayment.amount || 4000\n          };\n        }\n      }\n      return acc;\n    }, {});\n    const filtered = Object.values(groupedPayments).map(payment => {\n      let payDateStr = payment.payDate || payment.payment_date || '1970-01-01';\n      let payDate = new Date(formatDate(payDateStr, payment.id));\n      let adjustedStatus = payment.originalStatus || payment.status || 'Unknown';\n      let pendingDuration = '0 Months';\n      let totalPendingAmount = 0;\n      if (payment.student_details_id) {\n        const pendingHistory = paymentHistories[payment.student_details_id] || [];\n        if (pendingHistory.length > 0) {\n          const pendingItems = pendingHistory.filter(p => p.status === 'Pending' && new Date(formatDate(p.payDate, payment.id)) <= currentDate);\n          if (pendingItems.length > 0) {\n            totalPendingAmount = pendingItems.reduce((sum, p) => sum + (p.amount || 4000), 0);\n            pendingDuration = `${pendingItems.length} Month${pendingItems.length !== 1 ? 's' : ''}`;\n            adjustedStatus = 'Pending';\n          } else {\n            adjustedStatus = 'Paid';\n            totalPendingAmount = 0;\n          }\n        }\n      }\n      if (totalPendingAmount === 0) {\n        const paymentMonth = payDate.getMonth();\n        const paymentYear = payDate.getFullYear();\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        if (payment.originalStatus === 'Paid') {\n          adjustedStatus = 'Paid';\n          totalPendingAmount = 0;\n        } else if (paymentYear < currentYear || paymentYear === currentYear && paymentMonth < currentMonth) {\n          adjustedStatus = 'Pending';\n          const monthsDiff = (currentYear - paymentYear) * 12 + (currentMonth - paymentMonth);\n          totalPendingAmount = monthsDiff * (payment.originalAmount || 4000);\n          pendingDuration = `${monthsDiff} Month${monthsDiff !== 1 ? 's' : ''}`;\n        } else if (isBeforeDueDate) {\n          adjustedStatus = payDate >= currentMonthStart && payDate <= currentDate ? 'Paid' : 'Pending';\n          totalPendingAmount = payDate >= currentMonthStart && payDate <= currentDate ? 0 : payment.originalAmount || 4000;\n          pendingDuration = totalPendingAmount > 0 ? '1 Month' : '0 Months';\n        } else {\n          adjustedStatus = payDate >= currentMonthStart && payDate <= currentDate ? 'Paid' : 'Pending';\n          totalPendingAmount = payDate >= currentMonthStart && payDate <= currentDate ? 0 : payment.originalAmount || 4000;\n          pendingDuration = totalPendingAmount > 0 ? '1 Month' : '0 Months';\n        }\n      }\n      payment.amount = selectedStatus === 'Pending' ? totalPendingAmount : payment.originalAmount || 4000;\n      payment.status = adjustedStatus;\n      payment.pendingDuration = pendingDuration;\n      payment.formattedPayDate = formatDate(payDateStr, payment.id);\n      return payment;\n    }).filter(payment => {\n      var _payment$full_name, _payment$formattedPay, _payment$amount;\n      return (searchQuery === '' || ((_payment$full_name = payment.full_name) === null || _payment$full_name === void 0 ? void 0 : _payment$full_name.toLowerCase().includes(searchQuery.toLowerCase())) || ((_payment$formattedPay = payment.formattedPayDate) === null || _payment$formattedPay === void 0 ? void 0 : _payment$formattedPay.toLowerCase().includes(searchQuery.toLowerCase())) || ((_payment$amount = payment.amount) === null || _payment$amount === void 0 ? void 0 : _payment$amount.toString().includes(searchQuery))) && (selectedStatus === 'All' || payment.status === selectedStatus);\n    }).sort((a, b) => new Date(b.formattedPayDate) - new Date(a.formattedPayDate));\n    return filtered;\n  };\n  const stateOptions = [{\n    value: 'State',\n    label: 'State'\n  }, {\n    value: 'Active',\n    label: 'Active'\n  }, {\n    value: 'Inactive',\n    label: 'Inactive'\n  }];\n  const statusOptions = [{\n    value: 'All',\n    label: 'All'\n  }, {\n    value: 'Paid',\n    label: 'Paid'\n  }, {\n    value: 'Pending',\n    label: 'Pending'\n  }];\n  const selectedStateOption = stateOptions.find(option => option.value === selectedState) || stateOptions[0];\n  const StudentFeeStepperModal = ({\n    isOpen,\n    onClose,\n    onPaymentSuccess\n  }) => {\n    _s();\n    const [currentStep, setCurrentStep] = useState(1);\n    const [selectedStudent, setSelectedStudent] = useState(null);\n    const [feesData, setFeesData] = useState(null);\n    const [selectedCourse, setSelectedCourse] = useState('Violin');\n    const [selectedMonths, setSelectedMonths] = useState([]);\n    const [selectedStatus, setSelectedStatus] = useState('Paid');\n    const [error, setError] = useState(null);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    useEffect(() => {\n      if (isOpen) {\n        setCurrentStep(1);\n        setSelectedStudent(null);\n        setFeesData(null);\n        setSelectedCourse('Violin');\n        setSelectedMonths([]);\n        setSelectedStatus('Paid');\n        setError(null);\n        setIsSubmitting(false);\n      }\n    }, [isOpen]);\n    const handleMonthSelect = months => {\n      console.log('handleMonthSelect in StudentFeeStepperModal:', months);\n      setSelectedMonths(Array.isArray(months) ? months : []);\n    };\n    const handleNext = async () => {\n      if (currentStep === 1 && selectedStudent) {\n        try {\n          setError(null);\n          setIsSubmitting(true);\n          const response = await axios.get(`${API_BASE_URL}/payment/${selectedStudent.student_details_id}`, {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            params: {\n              _t: Date.now()\n            }\n          });\n          setFeesData({\n            ...response.data,\n            course: selectedCourse\n          });\n          setCurrentStep(2);\n        } catch (err) {\n          var _err$response6, _err$response6$data;\n          console.error('Error fetching fees for student_no:', selectedStudent.student_no, err);\n          setError('Failed to fetch fees: ' + (((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || err.message));\n        } finally {\n          setIsSubmitting(false);\n        }\n      } else if (currentStep === 2 && selectedMonths.length > 0) {\n        try {\n          setError(null);\n          setIsSubmitting(true);\n          const monthsQuery = selectedMonths.join(',');\n          console.log('Fetching fees for months:', monthsQuery);\n          const response = await axios.get(`${API_BASE_URL}/payment/${selectedStudent.student_details_id}?months=${monthsQuery}`, {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            params: {\n              _t: Date.now()\n            }\n          });\n          setFeesData({\n            ...response.data,\n            course: selectedCourse\n          });\n          setCurrentStep(3);\n        } catch (err) {\n          var _err$response7, _err$response7$data;\n          console.error('Error fetching fees for selected months:', err);\n          setError('Failed to fetch fees: ' + (((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.message) || err.message));\n        } finally {\n          setIsSubmitting(false);\n        }\n      } else {\n        setError('Please select at least one month to proceed.');\n      }\n    };\n    const handlePrev = () => {\n      if (currentStep > 1) {\n        setCurrentStep(prev => prev - 1);\n        setError(null);\n      }\n    };\n    const handleSubmit = async () => {\n      if (selectedStudent && feesData && selectedMonths.length > 0 && !isSubmitting) {\n        setIsSubmitting(true);\n        try {\n          var _paymentResponse$data;\n          const paymentData = {\n            full_name: selectedStudent.full_name || 'N/A',\n            student_no: selectedStudent.student_no || `STU_${Date.now()}`,\n            course: selectedCourse || 'Violin',\n            total_fees: feesData.total_fees || 4000,\n            date: format(new Date(), 'yyyy-MM-dd'),\n            status: selectedStatus,\n            branch_name: selectedStudent.branch_name || 'N/A',\n            course_fees: feesData.course_fees || {},\n            admission_fee: feesData.admission_fee || 0,\n            selectedMonths\n          };\n          console.log('Submitting paymentData:', paymentData);\n          const paymentResponse = await axios.post(`${API_BASE_URL}/payment/${selectedStudent.student_details_id}`, paymentData, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          const successData = {\n            fullName: paymentResponse.data.full_name || selectedStudent.full_name || 'N/A',\n            studentId: paymentResponse.data.student_no || selectedStudent.student_no || `STU_${Date.now()}`,\n            student_details_id: paymentResponse.data.student_details_id || selectedStudent.student_details_id,\n            // Added for consistency\n            course: paymentResponse.data.course || selectedCourse || 'Violin',\n            amount: paymentResponse.data.total_fees || feesData.total_fees || 4000,\n            date: formatDate(paymentResponse.data.date || new Date().toLocaleDateString('en-GB', {\n              timeZone: 'Asia/Colombo'\n            }), paymentResponse.data.id || 'new_payment'),\n            transactionId: Math.random().toString(36).substr(2, 9).toUpperCase(),\n            status: paymentResponse.data.status || selectedStatus,\n            location: paymentResponse.data.branch_name || selectedStudent.branch_name || 'N/A',\n            subjects: Object.entries(paymentResponse.data.course_fees || feesData.course_fees || {}).flatMap(([month, grades]) => Object.entries(grades).flatMap(([grade, courses]) => Object.entries(courses).map(([courseName]) => ({\n              name: courseName,\n              grade: grade.replace('Grade ', '')\n            })))),\n            paidFor: ((_paymentResponse$data = paymentResponse.data.selectedMonths) === null || _paymentResponse$data === void 0 ? void 0 : _paymentResponse$data.join(', ')) || selectedMonths.join(', ') || 'N/A',\n            admissionFee: paymentResponse.data.admission_fee || feesData.admission_fee || 0,\n            monthlyFee: paymentResponse.data.total_course_fees || feesData.total_course_fees || feesData.total_fees || 0,\n            totalAmount: paymentResponse.data.total_fees || feesData.total_fees || 0,\n            course_fees: paymentResponse.data.course_fees || feesData.course_fees || {},\n            selectedMonths: paymentResponse.data.selectedMonths || selectedMonths || []\n          };\n          console.log('Success Data:', successData);\n          onPaymentSuccess(successData);\n          onClose();\n        } catch (err) {\n          var _err$response8, _err$response8$data;\n          console.error('Error sending payment data:', err);\n          setError('Failed to submit payment: ' + (((_err$response8 = err.response) === null || _err$response8 === void 0 ? void 0 : (_err$response8$data = _err$response8.data) === null || _err$response8$data === void 0 ? void 0 : _err$response8$data.message) || err.message));\n          const fallbackData = {\n            fullName: selectedStudent.full_name || 'N/A',\n            studentId: selectedStudent.student_no || `STU_${Date.now()}`,\n            student_details_id: selectedStudent.student_details_id,\n            // Added for consistency\n            course: selectedCourse,\n            amount: feesData.total_fees || 4000,\n            date: format(new Date(), 'yyyy-MM-dd'),\n            transactionId: Math.random().toString(36).substr(2, 9).toUpperCase(),\n            status: selectedStatus,\n            location: selectedStudent.branch_name || 'N/A',\n            subjects: Object.entries(feesData.course_fees || {}).flatMap(([month, grades]) => Object.entries(grades).flatMap(([grade, courses]) => Object.entries(courses).map(([courseName]) => ({\n              name: courseName,\n              grade: grade.replace('Grade ', '')\n            })))),\n            paidFor: selectedMonths.join(', ') || 'N/A',\n            admissionFee: feesData.admission_fee || 0,\n            monthlyFee: feesData.total_course_fees || feesData.total_fees || 0,\n            totalAmount: feesData.total_fees || 0,\n            course_fees: feesData.course_fees || {},\n            selectedMonths\n          };\n          console.log('Fallback Data:', fallbackData);\n          onPaymentSuccess(fallbackData);\n          onClose();\n        } finally {\n          setIsSubmitting(false);\n        }\n      } else {\n        setError('Missing required data for payment.');\n      }\n    };\n    const renderStepContent = () => {\n      switch (currentStep) {\n        case 1:\n          return /*#__PURE__*/_jsxDEV(Step1StudentsDetails, {\n            onStudentSelect: setSelectedStudent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 18\n          }, this);\n        case 2:\n          return selectedStudent ? /*#__PURE__*/_jsxDEV(Step2Courses, {\n            student_details_id: selectedStudent.student_details_id,\n            student_no: selectedStudent.student_no,\n            feesData: feesData,\n            onCourseSelect: setSelectedCourse,\n            currentCourse: selectedCourse,\n            onMonthSelect: handleMonthSelect,\n            selectedMonths: selectedMonths\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a student first.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 13\n          }, this);\n        case 3:\n          return selectedStudent && feesData ? /*#__PURE__*/_jsxDEV(Step3PaymentInfo, {\n            selectedStudent: selectedStudent,\n            selectedStatus: selectedStatus,\n            onStatusChange: setSelectedStatus,\n            selectedMonths: selectedMonths,\n            onSelectPayment: setFeesData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading payment info...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 13\n          }, this);\n        default:\n          return null;\n      }\n    };\n    if (!isOpen) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content student-fee-entry-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Student Fee Entry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-btn\",\n            onClick: onClose,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StepperHeader, {\n          currentStep: currentStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-body\",\n          children: renderStepContent()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-footer\",\n          children: [currentStep > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"prev-btn\",\n            onClick: handlePrev,\n            disabled: isSubmitting,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 15\n          }, this), currentStep < 3 ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"next-btn\",\n            onClick: handleNext,\n            disabled: currentStep === 1 && !selectedStudent || currentStep === 2 && selectedMonths.length === 0 || isSubmitting,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-btn\",\n            onClick: handleSubmit,\n            disabled: !selectedStudent || !feesData || selectedMonths.length === 0 || isSubmitting,\n            children: isSubmitting ? 'Submitting...' : 'Submit Payment'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 7\n    }, this);\n  };\n  _s(StudentFeeStepperModal, \"GsedP8jyzv8rPTwH+xJueyN3DdM=\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search...\",\n        className: \"search-bar\",\n        value: searchQuery,\n        onChange: e => setSearchQuery(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-payment-btn\",\n        onClick: handleAddPayment,\n        children: \"+ Add Payment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-controls-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-dropdown-container\",\n        ref: stateDropdownRef,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `filter-dropdown-btn ${isStateDropdownOpen ? 'open' : ''}`,\n          onClick: handleStateDropdownToggle,\n          type: \"button\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: selectedStateOption.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: `dropdown-arrow ${isStateDropdownOpen ? 'rotated' : ''}`,\n            width: \"12\",\n            height: \"8\",\n            viewBox: \"0 0 12 8\",\n            fill: \"none\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M1 1.5L6 6.5L11 1.5\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 802,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 11\n        }, this), isStateDropdownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-dropdown-menu\",\n          children: stateOptions.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `filter-dropdown-item ${selectedState === option.value ? 'selected' : ''}`,\n            onClick: () => handleStateSelect(option),\n            children: option.label\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: selectedStatus === 'Pending' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 833,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Amount (Rs)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 834,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Pending\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 835,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"status-filter-container\",\n                  ref: statusDropdownRef,\n                  children: [\"Status\", /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: filterIcon,\n                    alt: \"Filter\",\n                    className: \"icon filter-icon\",\n                    onClick: handleStatusDropdownToggle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 839,\n                    columnNumber: 23\n                  }, this), isStatusDropdownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"status-dropdown-menu\",\n                    children: statusOptions.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: `status-dropdown-item ${selectedStatus === option.value ? 'selected' : ''}`,\n                      onClick: e => {\n                        e.stopPropagation();\n                        handleStatusSelect(option);\n                      },\n                      children: option.label\n                    }, option.value, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 848,\n                      columnNumber: 29\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 846,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 837,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 836,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Action\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 863,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 867,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Pay Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 868,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Amount (Rs)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 869,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"status-filter-container\",\n                  ref: statusDropdownRef,\n                  children: [\"Status\", /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: filterIcon,\n                    alt: \"Filter\",\n                    className: \"icon filter-icon\",\n                    onClick: handleStatusDropdownToggle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 873,\n                    columnNumber: 23\n                  }, this), isStatusDropdownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"status-dropdown-menu\",\n                    children: statusOptions.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: `status-dropdown-item ${selectedStatus === option.value ? 'selected' : ''}`,\n                      onClick: e => {\n                        e.stopPropagation();\n                        handleStatusSelect(option);\n                      },\n                      children: option.label\n                    }, option.value, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 882,\n                      columnNumber: 29\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 880,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 871,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 870,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Action\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 897,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: getFilteredPayments().map(payment => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: selectedStatus === 'Pending' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: payment.full_name || payment.name || 'Unknown Name'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 907,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: payment.amount.toLocaleString('en-US') || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 908,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: payment.pendingDuration\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 909,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: payment.status === 'Paid' ? 'status-paid' : 'status-pending',\n                  children: payment.status || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 911,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 910,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"action-icons\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: eyeIcon,\n                  alt: \"View\",\n                  className: \"icon\",\n                  onClick: () => handleIconClick('View', payment.id),\n                  title: \"View Details\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 916,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 915,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: payment.full_name || payment.name || 'Unknown Name'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 927,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: payment.formattedPayDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 928,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: payment.amount.toLocaleString('en-US') || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 929,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: payment.status === 'Paid' ? 'status-paid' : 'status-pending',\n                  children: payment.status || 'Unknown'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 931,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 930,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"action-icons\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: eyeIcon,\n                  alt: \"View\",\n                  className: \"icon\",\n                  onClick: () => handleIconClick('View', payment.id),\n                  title: \"View Details\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 936,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 935,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, payment.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading payments...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 952,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 11\n      }, this), !isLoading && getFilteredPayments().length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-data\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No payments found for the selected filters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 827,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PaymentDetailsModal, {\n      isOpen: isModalOpen,\n      onClose: closeModal,\n      paymentData: selectedPayment\n    }, selectedPayment === null || selectedPayment === void 0 ? void 0 : selectedPayment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 962,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StudentFeeStepperModal, {\n      isOpen: isStepperOpen,\n      onClose: closeStepper,\n      onPaymentSuccess: handlePaymentSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 968,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PaymentSuccessModal, {\n      isOpen: isSuccessModalOpen,\n      onClose: closeSuccessModal,\n      onGenerateReceipt: () => handleGenerateReceipt(receiptData === null || receiptData === void 0 ? void 0 : receiptData.student_details_id),\n      receiptData: receiptData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 973,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Receipt, {\n      isOpen: isReceiptOpen,\n      onClose: closeReceipt,\n      receiptData: receiptData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PendingModal, {\n      isOpen: isPendingModalOpen,\n      onClose: closePendingModal,\n      paymentData: selectedPayment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 984,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(PaymentTable, \"2wFkbRzV7QupsM7UoGoPeVH7ABg=\");\n_c = PaymentTable;\nexport default PaymentTable;\nvar _c;\n$RefreshReg$(_c, \"PaymentTable\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","eyeIcon","filterIcon","PaymentDetailsModal","PaymentSuccessModal","Receipt","Step1StudentsDetails","Step2Courses","Step3PaymentInfo","StepperHeader","PendingModal","parse","format","isValid","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","PaymentTable","selectedState","propSelectedState","_s2","_s","$RefreshSig$","isModalOpen","setIsModalOpen","selectedPayment","setSelectedPayment","isStepperOpen","setIsStepperOpen","isSuccessModalOpen","setIsSuccessModalOpen","isReceiptOpen","setIsReceiptOpen","receiptData","setReceiptData","setSelectedState","selectedStatus","setSelectedStatus","isStateDropdownOpen","setIsStateDropdownOpen","isStatusDropdownOpen","setIsStatusDropdownOpen","searchQuery","setSearchQuery","isLoading","setIsLoading","refreshKey","setRefreshKey","stateDropdownRef","statusDropdownRef","payments","setPayments","originalPayments","setOriginalPayments","isPendingModalOpen","setIsPendingModalOpen","paymentHistories","setPaymentHistories","forceRefresh","prev","formatDate","dateStr","paymentId","console","warn","Date","date","fetchPayments","response","get","params","state","undefined","status","_t","now","Array","isArray","data","histories","Promise","all","map","payment","student_details_id","historyResponse","pendingHistory","log","err","_err$response","message","error","_err$response2","_err$response3","alert","fetchSearchResults","trim","toLowerCase","search","_err$response4","_err$response5","timeoutId","setTimeout","clearTimeout","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleAddPayment","handleStateDropdownToggle","handleStatusDropdownToggle","handleStateSelect","value","handleStatusSelect","handleIconClick","action","find","p","id","closeModal","closePendingModal","closeStepper","closeSuccessModal","handlePaymentSuccess","newPayment","full_name","fullName","studentName","student_no","studentId","course","payDate","toLocaleDateString","timeZone","amount","parseInt","totalAmount","branch_name","location","course_fees","selectedMonths","isDuplicate","some","_newPayment$selectedM","_data$selectedMonths","newReceiptData","total_course_fees","monthlyFee","admission_fee","admissionFee","total_fees","paidFor","join","sort","a","b","payment_date","branch","name","_newPayment$selectedM2","_data$selectedMonths2","handleGenerateReceipt","_receiptData$selected","_response$data$select","_receiptData$selected2","months","formattedData","_error$response","_error$response2","_receiptData$selected3","closeReceipt","getFilteredPayments","currentDate","currentMonthStart","getFullYear","getMonth","dueDate","isBeforeDueDate","groupedPayments","reduce","acc","studentNo","originalPayment","originalStatus","originalAmount","existingDate","filtered","Object","values","payDateStr","adjustedStatus","pendingDuration","totalPendingAmount","length","pendingItems","filter","sum","paymentMonth","paymentYear","currentMonth","currentYear","monthsDiff","formattedPayDate","_payment$full_name","_payment$formattedPay","_payment$amount","includes","toString","stateOptions","label","statusOptions","selectedStateOption","option","StudentFeeStepperModal","isOpen","onClose","onPaymentSuccess","currentStep","setCurrentStep","selectedStudent","setSelectedStudent","feesData","setFeesData","selectedCourse","setSelectedCourse","setSelectedMonths","setError","isSubmitting","setIsSubmitting","handleMonthSelect","handleNext","headers","_err$response6","_err$response6$data","monthsQuery","_err$response7","_err$response7$data","handlePrev","handleSubmit","_paymentResponse$data","paymentData","paymentResponse","post","successData","transactionId","Math","random","substr","toUpperCase","subjects","entries","flatMap","month","grades","grade","courses","courseName","replace","_err$response8","_err$response8$data","fallbackData","renderStepContent","onStudentSelect","fileName","_jsxFileName","lineNumber","columnNumber","onCourseSelect","currentCourse","onMonthSelect","children","onStatusChange","onSelectPayment","className","onClick","disabled","type","placeholder","onChange","e","ref","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","src","alt","stopPropagation","toLocaleString","title","onGenerateReceipt","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/SMS Final Final Code K/Frontend/src/sections/payments/PaymentList.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport '../../Styles/payment/Payment.css';\r\nimport eyeIcon from '../../assets/icons/Eye.png';\r\nimport filterIcon from '../../assets/icons/filter2.png';\r\nimport PaymentDetailsModal from '../payments/models/PaymentDetailsModal';\r\nimport PaymentSuccessModal from '../payments/models/SuccesPaymentModel';\r\nimport Receipt from './Recipt';\r\nimport Step1StudentsDetails from '../payments/stepper/Step1StudentsDetails';\r\nimport Step2Courses from '../payments/stepper/Step2Courses';\r\nimport Step3PaymentInfo from '../payments/stepper/Step3PaymentInfo';\r\nimport StepperHeader from '../payments/stepper/StepperHeader';\r\nimport PendingModal from '../payments/models/PendingModal';\r\nimport { parse, format, isValid } from 'date-fns';\r\nconst API_BASE_URL = \"https://aradanabeta.pineappleai.cloud/api/sms/api\";\r\n\r\nconst PaymentTable = ({ selectedState: propSelectedState = 'State' }) => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedPayment, setSelectedPayment] = useState(null);\r\n  const [isStepperOpen, setIsStepperOpen] = useState(false);\r\n  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);\r\n  const [isReceiptOpen, setIsReceiptOpen] = useState(false);\r\n  const [receiptData, setReceiptData] = useState(null);\r\n  const [selectedState, setSelectedState] = useState(propSelectedState);\r\n  const [selectedStatus, setSelectedStatus] = useState('All');\r\n  const [isStateDropdownOpen, setIsStateDropdownOpen] = useState(false);\r\n  const [isStatusDropdownOpen, setIsStatusDropdownOpen] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n  const stateDropdownRef = useRef(null);\r\n  const statusDropdownRef = useRef(null);\r\n  const [payments, setPayments] = useState([]);\r\n  const [originalPayments, setOriginalPayments] = useState([]);\r\n  const [isPendingModalOpen, setIsPendingModalOpen] = useState(false);\r\n  const [paymentHistories, setPaymentHistories] = useState({});\r\n\r\n  const forceRefresh = () => {\r\n    setRefreshKey(prev => prev + 1);\r\n  };\r\n\r\nconst formatDate = (dateStr, paymentId) => {\r\n    if (!dateStr) {\r\n        console.warn(`dateStr is undefined or null for payment ${paymentId}, using current date`);\r\n        return format(new Date(), 'yyyy-MM-dd');\r\n    }\r\n    let date;\r\n    if (dateStr instanceof Date) {\r\n        date = dateStr;\r\n    } else {\r\n        date = parse(dateStr, 'dd/MM/yyyy', new Date());\r\n        if (!isValid(date)) {\r\n            date = new Date(dateStr);\r\n            if (!isValid(date)) {\r\n                console.warn(`Invalid payDate for payment ${paymentId}: ${dateStr}, using current date`);\r\n                date = new Date();\r\n            }\r\n        }\r\n    }\r\n    return format(date, 'yyyy-MM-dd');\r\n};\r\n\r\n  useEffect(() => {\r\n    const fetchPayments = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setOriginalPayments([]);\r\n        setPayments([]);\r\n        const response = await axios.get(API_BASE_URL + '/searchmain', {\r\n          params: {\r\n            state: selectedState !== 'State' ? selectedState : undefined,\r\n            status: selectedStatus !== 'All' ? selectedStatus : undefined,\r\n            _t: Date.now(),\r\n          },\r\n        });\r\n        if (Array.isArray(response.data)) {\r\n          setOriginalPayments(response.data);\r\n          setPayments(response.data);\r\n          const histories = {};\r\n          await Promise.all(response.data.map(async (payment) => {\r\n            if (payment.student_details_id) {\r\n              try {\r\n                const historyResponse = await axios.get(API_BASE_URL + `/payment-history/${payment.student_details_id}`);\r\n                histories[payment.student_details_id] = historyResponse.data.pendingHistory || [];\r\n                console.log(`Payment history for student ${payment.student_details_id}:`, historyResponse.data.pendingHistory);\r\n              } catch (err) {\r\n                console.warn(`No payment history for student ${payment.student_details_id}:`, err.response?.data || err.message);\r\n                histories[payment.student_details_id] = [];\r\n              }\r\n            }\r\n          }));\r\n          setPaymentHistories(histories);\r\n          console.log('Fetched payments:', response.data);\r\n          console.log('Payment histories:', histories);\r\n        } else {\r\n          console.error('API response is not an array:', response.data);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching payments:', err.response?.status, err.response?.data || err.message);\r\n        alert('Failed to load payments. Please try again later.');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchPayments();\r\n  }, [selectedState, selectedStatus, refreshKey]);\r\n\r\n  useEffect(() => {\r\n    const fetchSearchResults = async () => {\r\n      if (searchQuery.trim() === '') {\r\n        forceRefresh();\r\n        return;\r\n      }\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get(API_BASE_URL + '/filterstatus/search', {\r\n          params: {\r\n            status: selectedStatus !== 'All' ? selectedStatus.toLowerCase() : undefined,\r\n            search: searchQuery,\r\n            _t: Date.now(),\r\n          },\r\n        });\r\n        setOriginalPayments(response.data);\r\n        setPayments(response.data);\r\n        const histories = {};\r\n        await Promise.all(response.data.map(async (payment) => {\r\n          if (payment.student_details_id) {\r\n            const historyResponse = await axios.get(API_BASE_URL + `/payment-history/${payment.student_details_id}`);\r\n            histories[payment.student_details_id] = historyResponse.data.pendingHistory || [];\r\n          }\r\n        }));\r\n        setPaymentHistories(histories);\r\n      } catch (err) {\r\n        console.error('Error fetching search results:', err.response?.status, err.response?.data || err.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    const timeoutId = setTimeout(fetchSearchResults, 3000);\r\n    return () => clearTimeout(timeoutId);\r\n  }, [searchQuery, selectedStatus]);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (stateDropdownRef.current && !stateDropdownRef.current.contains(event.target)) {\r\n        setIsStateDropdownOpen(false);\r\n      }\r\n      if (statusDropdownRef.current && !statusDropdownRef.current.contains(event.target)) {\r\n        setIsStatusDropdownOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const handleAddPayment = () => {\r\n    setIsStepperOpen(true);\r\n  };\r\n\r\n  const handleStateDropdownToggle = () => {\r\n    setIsStateDropdownOpen(!isStateDropdownOpen);\r\n    setIsStatusDropdownOpen(false);\r\n  };\r\n\r\n  const handleStatusDropdownToggle = () => {\r\n    setIsStatusDropdownOpen(!isStatusDropdownOpen);\r\n    setIsStateDropdownOpen(false);\r\n  };\r\n\r\n  const handleStateSelect = (state) => {\r\n    setSelectedState(state.value);\r\n    setIsStateDropdownOpen(false);\r\n    forceRefresh();\r\n  };\r\n\r\n  const handleStatusSelect = (status) => {\r\n    setSelectedStatus(status.value);\r\n    setIsStatusDropdownOpen(false);\r\n    forceRefresh();\r\n  };\r\n\r\n  const handleIconClick = (action, paymentId) => {\r\n    const payment = payments.find((p) => p.id === paymentId);\r\n    if (payment) {\r\n      if (action === 'View') {\r\n        const pendingHistory = paymentHistories[payment.student_details_id] || [];\r\n        setSelectedPayment({ ...payment, selectedStatus, pendingHistory });\r\n        if (selectedStatus === 'Pending') {\r\n          setIsPendingModalOpen(true);\r\n        } else {\r\n          setIsModalOpen(true);\r\n        }\r\n      }\r\n    } else {\r\n      console.warn(`Payment with id ${paymentId} not found`);\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setSelectedPayment(null);\r\n    forceRefresh();\r\n  };\r\n\r\n  const closePendingModal = () => {\r\n    setIsPendingModalOpen(false);\r\n    setSelectedPayment(null);\r\n    forceRefresh();\r\n  };\r\n\r\n  const closeStepper = () => {\r\n    setIsStepperOpen(false);\r\n  };\r\n\r\n  const closeSuccessModal = () => {\r\n    setIsSuccessModalOpen(false);\r\n    setReceiptData(null);\r\n  };\r\n\r\n  const handlePaymentSuccess = async (data) => {\r\n    console.log('Payment Success Data:', data);\r\n    try {\r\n        setIsLoading(true);\r\n        const newPayment = {\r\n            full_name: data.fullName || data.studentName || 'N/A',\r\n            student_no: data.studentId || `STU_${Date.now()}`,\r\n            course: data.course || 'Violin',\r\n            payDate: formatDate(\r\n                data.date || new Date().toLocaleDateString('en-GB', { timeZone: 'Asia/Colombo' }),\r\n                'new_payment'\r\n            ),\r\n            amount: parseInt(data.totalAmount) || parseInt(data.amount) || 4000,\r\n            status: data.status || 'Paid',\r\n            branch_name: data.location || 'N/A',\r\n            student_details_id: data.student_details_id || data.studentId, \r\n            course_fees: data.course_fees || {},\r\n            selectedMonths: data.selectedMonths || [],\r\n        };\r\n\r\n        const isDuplicate = originalPayments.some(p =>\r\n            p.id === newPayment.id ||\r\n            (p.student_no === newPayment.student_no &&\r\n             p.full_name === newPayment.full_name &&\r\n             p.payDate === newPayment.payDate)\r\n        );\r\n\r\n        if (!isDuplicate) {\r\n            const newReceiptData = {\r\n                student_no: newPayment.student_no || data.studentId || `STU_${Date.now()}`,\r\n                full_name: newPayment.full_name || data.fullName || data.studentName || 'N/A',\r\n                branch_name: newPayment.branch_name || data.location || 'N/A',\r\n                course_fees: newPayment.course_fees || data.course_fees || {},\r\n                total_course_fees: parseInt(data.monthlyFee || data.amount) || 0,\r\n                admission_fee: parseInt(data.admissionFee) || 0,\r\n                total_fees: parseInt(data.totalAmount || data.amount) || 0,\r\n                date: formatDate(\r\n                    newPayment.payDate,\r\n                    newPayment.id || 'new_payment'\r\n                ),\r\n                paidFor: newPayment.selectedMonths?.join(', ') || data.paidFor || data.selectedMonths?.join(', ') || 'N/A',\r\n                selectedMonths: newPayment.selectedMonths || data.selectedMonths || [],\r\n            };\r\n\r\n            setOriginalPayments(prev => [...prev, newPayment].sort((a, b) =>\r\n                new Date(formatDate(b.payDate || b.payment_date, b.id)) -\r\n                new Date(formatDate(a.payDate || a.payment_date, a.id))\r\n            ));\r\n            setPayments(prev => [...prev, newPayment].sort((a, b) =>\r\n                new Date(formatDate(b.payDate || b.payment_date, b.id)) -\r\n                new Date(formatDate(a.payDate || a.payment_date, a.id))\r\n            ));\r\n            setReceiptData(newReceiptData);\r\n            setIsSuccessModalOpen(true);\r\n\r\n            setPaymentHistories(prev => ({\r\n                ...prev,\r\n                [newPayment.student_details_id]: [\r\n                    ...(prev[newPayment.student_details_id] || []),\r\n                    {\r\n                        date: formatDate(newPayment.payDate, newPayment.id),\r\n                        branch: newPayment.branch_name || 'N/A',\r\n                        payment: newPayment.amount || 4000,\r\n                        status: newPayment.status || 'Paid',\r\n                    },\r\n                ],\r\n            }));\r\n\r\n            setTimeout(() => forceRefresh(), 1000);\r\n        } else {\r\n            console.warn('Duplicate payment detected, skipping addition:', newPayment);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error processing payment:', error);\r\n        const newPayment = {\r\n            id: Date.now(),\r\n            name: data.fullName || data.studentName || 'N/A',\r\n            course: data.course || 'Violin',\r\n            payDate: formatDate(\r\n                data.date || new Date().toLocaleDateString('en-GB', { timeZone: 'Asia/Colombo' }),\r\n                'fallback_payment'\r\n            ),\r\n            amount: parseInt(data.totalAmount) || parseInt(data.amount) || 4000,\r\n            status: data.status || 'Paid',\r\n            student_no: data.studentId || `STU_${Date.now()}`,\r\n            full_name: data.fullName || data.studentName || 'N/A',\r\n            student_details_id: data.student_details_id || data.studentId, // Prefer student_details_id\r\n            course_fees: data.course_fees || {},\r\n            selectedMonths: data.selectedMonths || [],\r\n        };\r\n\r\n        const isDuplicate = originalPayments.some(p =>\r\n            p.id === newPayment.id ||\r\n            (p.student_no === newPayment.student_no &&\r\n             p.full_name === newPayment.full_name &&\r\n             p.payDate === newPayment.payDate)\r\n        );\r\n\r\n        if (!isDuplicate) {\r\n            const newReceiptData = {\r\n                student_no: newPayment.student_no,\r\n                full_name: newPayment.full_name,\r\n                branch_name: data.location || 'N/A',\r\n                course_fees: newPayment.course_fees || data.course_fees || {},\r\n                total_course_fees: parseInt(data.monthlyFee || data.amount) || 0,\r\n                admission_fee: parseInt(data.admissionFee) || 0,\r\n                total_fees: parseInt(data.totalAmount || data.amount) || 0,\r\n                date: formatDate(newPayment.payDate, newPayment.id),\r\n                paidFor: newPayment.selectedMonths?.join(', ') || data.paidFor || data.selectedMonths?.join(', ') || 'N/A',\r\n                selectedMonths: newPayment.selectedMonths || data.selectedMonths || [],\r\n            };\r\n\r\n            setOriginalPayments(prev => [...prev, newPayment].sort((a, b) =>\r\n                new Date(formatDate(b.payDate || b.payment_date, b.id)) -\r\n                new Date(formatDate(a.payDate || a.payment_date, a.id))\r\n            ));\r\n            setPayments(prev => [...prev, newPayment].sort((a, b) =>\r\n                new Date(formatDate(b.payDate || b.payment_date, b.id)) -\r\n                new Date(formatDate(a.payDate || a.payment_date, a.id))\r\n            ));\r\n            setReceiptData(newReceiptData);\r\n            setIsSuccessModalOpen(true);\r\n\r\n            setPaymentHistories(prev => ({\r\n                ...prev,\r\n                [newPayment.student_details_id]: [\r\n                    ...(prev[newPayment.student_details_id] || []),\r\n                    {\r\n                        date: formatDate(newPayment.payDate, newPayment.id),\r\n                        branch: newPayment.branch_name || 'N/A',\r\n                        payment: newPayment.amount || 4000,\r\n                        status: newPayment.status || 'Paid',\r\n                    },\r\n                ],\r\n            }));\r\n\r\n            setTimeout(() => forceRefresh(), 1000);\r\n        } else {\r\n            console.warn('Duplicate payment detected in fallback, skipping addition:', newPayment);\r\n        }\r\n    } finally {\r\n        setIsLoading(false);\r\n    }\r\n};\r\n\r\n  const handleGenerateReceipt = async (student_details_id) => {\r\n    if (student_details_id && !isLoading) {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await axios.get(API_BASE_URL + `/payment/${student_details_id}`, {\r\n          params: { months: receiptData?.selectedMonths?.join(',') || '', _t: Date.now() }\r\n        });\r\n        const formattedData = {\r\n          full_name: response.data.full_name || receiptData?.full_name || 'N/A',\r\n          branch_name: response.data.branch_name || receiptData?.branch_name || 'N/A',\r\n          student_no: response.data.student_no || receiptData?.student_no || 'N/A',\r\n          course_fees: response.data.course_fees || receiptData?.course_fees || {},\r\n          total_course_fees: response.data.total_course_fees || receiptData?.total_course_fees || 0,\r\n          admission_fee: response.data.admission_fee || receiptData?.admission_fee || 0,\r\n          total_fees: response.data.total_fees || receiptData?.total_fees || 0,\r\n          date: formatDate(response.data.date || new Date().toLocaleDateString('en-GB', { timeZone: 'Asia/Colombo' }), 'receipt_data'),\r\n          paidFor: response.data.selectedMonths?.join(', ') || receiptData?.paidFor || receiptData?.selectedMonths?.join(', ') || 'N/A',\r\n          selectedMonths: response.data.selectedMonths || receiptData?.selectedMonths || [],\r\n        };\r\n        setReceiptData(formattedData);\r\n        setIsReceiptOpen(true);\r\n        setIsSuccessModalOpen(false);\r\n      } catch (error) {\r\n        console.error('Error fetching receipt data for student_details_id:', student_details_id, error.response?.status, error.response?.data || error.message);\r\n        alert('Failed to fetch receipt data. Using cached or default values.');\r\n        const formattedData = {\r\n          full_name: receiptData?.full_name || 'N/A',\r\n          branch_name: receiptData?.branch_name || 'N/A',\r\n          student_no: receiptData?.student_no || 'N/A',\r\n          course_fees: receiptData?.course_fees || {},\r\n          total_course_fees: receiptData?.total_course_fees || 0,\r\n          admission_fee: receiptData?.admission_fee || 0,\r\n          total_fees: receiptData?.total_fees || 0,\r\n          date: formatDate(receiptData?.date || new Date().toLocaleDateString('en-GB', { timeZone: 'Asia/Colombo' }), 'receipt_fallback'),\r\n          paidFor: receiptData?.paidFor || receiptData?.selectedMonths?.join(', ') || 'N/A',\r\n          selectedMonths: receiptData?.selectedMonths || [],\r\n        };\r\n        setReceiptData(formattedData);\r\n        setIsReceiptOpen(true);\r\n        setIsSuccessModalOpen(false);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const closeReceipt = () => {\r\n    setIsReceiptOpen(false);\r\n    setReceiptData(null);\r\n  };\r\n\r\n  const getFilteredPayments = () => {\r\n    const currentDate = new Date();\r\n    const currentMonthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n    const dueDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 10);\r\n    const isBeforeDueDate = currentDate <= dueDate;\r\n\r\n    const groupedPayments = payments.reduce((acc, payment) => {\r\n      const studentNo = payment.student_details_id || `unknown_${payment.id}`;\r\n      const originalPayment = originalPayments.find(p => p.id === payment.id) || payment;\r\n      if (!acc[studentNo]) {\r\n        acc[studentNo] = { ...payment, originalStatus: originalPayment.status, originalAmount: originalPayment.amount || 4000 };\r\n      } else {\r\n        const existingDate = new Date(formatDate(acc[studentNo].payDate || acc[studentNo].payment_date || '1970-01-01', acc[studentNo].id));\r\n        const currentDate = new Date(formatDate(payment.payDate || payment.payment_date || '1970-01-01', payment.id));\r\n        if (currentDate > existingDate) {\r\n          acc[studentNo] = { ...payment, originalStatus: originalPayment.status, originalAmount: originalPayment.amount || 4000 };\r\n        }\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    const filtered = Object.values(groupedPayments).map(payment => {\r\n      let payDateStr = payment.payDate || payment.payment_date || '1970-01-01';\r\n      let payDate = new Date(formatDate(payDateStr, payment.id));\r\n\r\n      let adjustedStatus = payment.originalStatus || payment.status || 'Unknown';\r\n      let pendingDuration = '0 Months';\r\n      let totalPendingAmount = 0;\r\n\r\n      if (payment.student_details_id) {\r\n        const pendingHistory = paymentHistories[payment.student_details_id] || [];\r\n        if (pendingHistory.length > 0) {\r\n          const pendingItems = pendingHistory.filter(p => p.status === 'Pending' && new Date(formatDate(p.payDate, payment.id)) <= currentDate);\r\n          if (pendingItems.length > 0) {\r\n            totalPendingAmount = pendingItems.reduce((sum, p) => sum + (p.amount || 4000), 0);\r\n            pendingDuration = `${pendingItems.length} Month${pendingItems.length !== 1 ? 's' : ''}`;\r\n            adjustedStatus = 'Pending';\r\n          } else {\r\n            adjustedStatus = 'Paid';\r\n            totalPendingAmount = 0;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (totalPendingAmount === 0) {\r\n        const paymentMonth = payDate.getMonth();\r\n        const paymentYear = payDate.getFullYear();\r\n        const currentMonth = currentDate.getMonth();\r\n        const currentYear = currentDate.getFullYear();\r\n\r\n        if (payment.originalStatus === 'Paid') {\r\n          adjustedStatus = 'Paid';\r\n          totalPendingAmount = 0;\r\n        } else if (paymentYear < currentYear || (paymentYear === currentYear && paymentMonth < currentMonth)) {\r\n          adjustedStatus = 'Pending';\r\n          const monthsDiff = (currentYear - paymentYear) * 12 + (currentMonth - paymentMonth);\r\n          totalPendingAmount = monthsDiff * (payment.originalAmount || 4000);\r\n          pendingDuration = `${monthsDiff} Month${monthsDiff !== 1 ? 's' : ''}`;\r\n        } else if (isBeforeDueDate) {\r\n          adjustedStatus = (payDate >= currentMonthStart && payDate <= currentDate) ? 'Paid' : 'Pending';\r\n          totalPendingAmount = (payDate >= currentMonthStart && payDate <= currentDate) ? 0 : (payment.originalAmount || 4000);\r\n          pendingDuration = totalPendingAmount > 0 ? '1 Month' : '0 Months';\r\n        } else {\r\n          adjustedStatus = (payDate >= currentMonthStart && payDate <= currentDate) ? 'Paid' : 'Pending';\r\n          totalPendingAmount = (payDate >= currentMonthStart && payDate <= currentDate) ? 0 : (payment.originalAmount || 4000);\r\n          pendingDuration = totalPendingAmount > 0 ? '1 Month' : '0 Months';\r\n        }\r\n      }\r\n\r\n      payment.amount = selectedStatus === 'Pending' ? totalPendingAmount : (payment.originalAmount || 4000);\r\n      payment.status = adjustedStatus;\r\n      payment.pendingDuration = pendingDuration;\r\n      payment.formattedPayDate = formatDate(payDateStr, payment.id);\r\n\r\n      return payment;\r\n    }).filter(payment => {\r\n      return (searchQuery === '' ||\r\n        payment.full_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        payment.formattedPayDate?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        payment.amount?.toString().includes(searchQuery)) &&\r\n        (selectedStatus === 'All' || payment.status === selectedStatus);\r\n    }).sort((a, b) => new Date(b.formattedPayDate) - new Date(a.formattedPayDate));\r\n\r\n    return filtered;\r\n  };\r\n\r\n  const stateOptions = [\r\n    { value: 'State', label: 'State' },\r\n    { value: 'Active', label: 'Active' },\r\n    { value: 'Inactive', label: 'Inactive' },\r\n  ];\r\n\r\n  const statusOptions = [\r\n    { value: 'All', label: 'All' },\r\n    { value: 'Paid', label: 'Paid' },\r\n    { value: 'Pending', label: 'Pending' },\r\n  ];\r\n\r\n  const selectedStateOption = stateOptions.find((option) => option.value === selectedState) || stateOptions[0];\r\n\r\n  const StudentFeeStepperModal = ({ isOpen, onClose, onPaymentSuccess }) => {\r\n    const [currentStep, setCurrentStep] = useState(1);\r\n    const [selectedStudent, setSelectedStudent] = useState(null);\r\n    const [feesData, setFeesData] = useState(null);\r\n    const [selectedCourse, setSelectedCourse] = useState('Violin');\r\n    const [selectedMonths, setSelectedMonths] = useState([]);\r\n    const [selectedStatus, setSelectedStatus] = useState('Paid');\r\n    const [error, setError] = useState(null);\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n      if (isOpen) {\r\n        setCurrentStep(1);\r\n        setSelectedStudent(null);\r\n        setFeesData(null);\r\n        setSelectedCourse('Violin');\r\n        setSelectedMonths([]);\r\n        setSelectedStatus('Paid');\r\n        setError(null);\r\n        setIsSubmitting(false);\r\n      }\r\n    }, [isOpen]);\r\n\r\n    const handleMonthSelect = (months) => {\r\n      console.log('handleMonthSelect in StudentFeeStepperModal:', months);\r\n      setSelectedMonths(Array.isArray(months) ? months : []);\r\n    };\r\n\r\n    const handleNext = async () => {\r\n      if (currentStep === 1 && selectedStudent) {\r\n        try {\r\n          setError(null);\r\n          setIsSubmitting(true);\r\n          const response = await axios.get(\r\n            `${API_BASE_URL}/payment/${selectedStudent.student_details_id}`,\r\n            {\r\n              headers: { 'Content-Type': 'application/json' },\r\n              params: { _t: Date.now() },\r\n            }\r\n          );\r\n          setFeesData({ ...response.data, course: selectedCourse });\r\n          setCurrentStep(2);\r\n        } catch (err) {\r\n          console.error('Error fetching fees for student_no:', selectedStudent.student_no, err);\r\n          setError('Failed to fetch fees: ' + (err.response?.data?.message || err.message));\r\n        } finally {\r\n          setIsSubmitting(false);\r\n        }\r\n      } else if (currentStep === 2 && selectedMonths.length > 0) {\r\n        try {\r\n          setError(null);\r\n          setIsSubmitting(true);\r\n          const monthsQuery = selectedMonths.join(',');\r\n          console.log('Fetching fees for months:', monthsQuery);\r\n          const response = await axios.get(\r\n            `${API_BASE_URL}/payment/${selectedStudent.student_details_id}?months=${monthsQuery}`,\r\n            {\r\n              headers: { 'Content-Type': 'application/json' },\r\n              params: { _t: Date.now() },\r\n            }\r\n          );\r\n          setFeesData({ ...response.data, course: selectedCourse });\r\n          setCurrentStep(3);\r\n        } catch (err) {\r\n          console.error('Error fetching fees for selected months:', err);\r\n          setError('Failed to fetch fees: ' + (err.response?.data?.message || err.message));\r\n        } finally {\r\n          setIsSubmitting(false);\r\n        }\r\n      } else {\r\n        setError('Please select at least one month to proceed.');\r\n      }\r\n    };\r\n\r\n    const handlePrev = () => {\r\n      if (currentStep > 1) {\r\n        setCurrentStep((prev) => prev - 1);\r\n        setError(null);\r\n      }\r\n    };\r\n\r\nconst handleSubmit = async () => {\r\n    if (selectedStudent && feesData && selectedMonths.length > 0 && !isSubmitting) {\r\n        setIsSubmitting(true);\r\n        try {\r\n            const paymentData = {\r\n                full_name: selectedStudent.full_name || 'N/A',\r\n                student_no: selectedStudent.student_no || `STU_${Date.now()}`,\r\n                course: selectedCourse || 'Violin',\r\n                total_fees: feesData.total_fees || 4000,\r\n                date: format(new Date(), 'yyyy-MM-dd'),\r\n                status: selectedStatus,\r\n                branch_name: selectedStudent.branch_name || 'N/A',\r\n                course_fees: feesData.course_fees || {},\r\n                admission_fee: feesData.admission_fee || 0,\r\n                selectedMonths,\r\n            };\r\n\r\n            console.log('Submitting paymentData:', paymentData);\r\n\r\n            const paymentResponse = await axios.post(\r\n                `${API_BASE_URL}/payment/${selectedStudent.student_details_id}`,\r\n                paymentData,\r\n                { headers: { 'Content-Type': 'application/json' } }\r\n            );\r\n\r\n            const successData = {\r\n                fullName: paymentResponse.data.full_name || selectedStudent.full_name || 'N/A',\r\n                studentId: paymentResponse.data.student_no || selectedStudent.student_no || `STU_${Date.now()}`,\r\n                student_details_id: paymentResponse.data.student_details_id || selectedStudent.student_details_id, // Added for consistency\r\n                course: paymentResponse.data.course || selectedCourse || 'Violin',\r\n                amount: paymentResponse.data.total_fees || feesData.total_fees || 4000,\r\n                date: formatDate(\r\n                    paymentResponse.data.date || new Date().toLocaleDateString('en-GB', { timeZone: 'Asia/Colombo' }),\r\n                    paymentResponse.data.id || 'new_payment'\r\n                ),\r\n                transactionId: Math.random().toString(36).substr(2, 9).toUpperCase(),\r\n                status: paymentResponse.data.status || selectedStatus,\r\n                location: paymentResponse.data.branch_name || selectedStudent.branch_name || 'N/A',\r\n                subjects: Object.entries(paymentResponse.data.course_fees || feesData.course_fees || {}).flatMap(\r\n                    ([month, grades]) =>\r\n                        Object.entries(grades).flatMap(([grade, courses]) =>\r\n                            Object.entries(courses).map(([courseName]) => ({\r\n                                name: courseName,\r\n                                grade: grade.replace('Grade ', ''),\r\n                            }))\r\n                        )\r\n                ),\r\n                paidFor: paymentResponse.data.selectedMonths?.join(', ') || selectedMonths.join(', ') || 'N/A',\r\n                admissionFee: paymentResponse.data.admission_fee || feesData.admission_fee || 0,\r\n                monthlyFee: paymentResponse.data.total_course_fees || feesData.total_course_fees || feesData.total_fees || 0,\r\n                totalAmount: paymentResponse.data.total_fees || feesData.total_fees || 0,\r\n                course_fees: paymentResponse.data.course_fees || feesData.course_fees || {},\r\n                selectedMonths: paymentResponse.data.selectedMonths || selectedMonths || [],\r\n            };\r\n\r\n            console.log('Success Data:', successData);\r\n\r\n            onPaymentSuccess(successData);\r\n            onClose();\r\n        } catch (err) {\r\n            console.error('Error sending payment data:', err);\r\n            setError('Failed to submit payment: ' + (err.response?.data?.message || err.message));\r\n            const fallbackData = {\r\n                fullName: selectedStudent.full_name || 'N/A',\r\n                studentId: selectedStudent.student_no || `STU_${Date.now()}`,\r\n                student_details_id: selectedStudent.student_details_id, // Added for consistency\r\n                course: selectedCourse,\r\n                amount: feesData.total_fees || 4000,\r\n                date: format(new Date(), 'yyyy-MM-dd'),\r\n                transactionId: Math.random().toString(36).substr(2, 9).toUpperCase(),\r\n                status: selectedStatus,\r\n                location: selectedStudent.branch_name || 'N/A',\r\n                subjects: Object.entries(feesData.course_fees || {}).flatMap(([month, grades]) =>\r\n                    Object.entries(grades).flatMap(([grade, courses]) =>\r\n                        Object.entries(courses).map(([courseName]) => ({\r\n                            name: courseName,\r\n                            grade: grade.replace('Grade ', ''),\r\n                        }))\r\n                    )\r\n                ),\r\n                paidFor: selectedMonths.join(', ') || 'N/A',\r\n                admissionFee: feesData.admission_fee || 0,\r\n                monthlyFee: feesData.total_course_fees || feesData.total_fees || 0,\r\n                totalAmount: feesData.total_fees || 0,\r\n                course_fees: feesData.course_fees || {},\r\n                selectedMonths,\r\n            };\r\n            console.log('Fallback Data:', fallbackData);\r\n            onPaymentSuccess(fallbackData);\r\n            onClose();\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    } else {\r\n        setError('Missing required data for payment.');\r\n    }\r\n};\r\n\r\n    const renderStepContent = () => {\r\n      switch (currentStep) {\r\n        case 1:\r\n          return <Step1StudentsDetails onStudentSelect={setSelectedStudent} />;\r\n        case 2:\r\n          return selectedStudent ? (\r\n            <Step2Courses\r\n              student_details_id={selectedStudent.student_details_id}\r\n              student_no={selectedStudent.student_no}\r\n              feesData={feesData}\r\n              onCourseSelect={setSelectedCourse}\r\n              currentCourse={selectedCourse}\r\n              onMonthSelect={handleMonthSelect}\r\n              selectedMonths={selectedMonths}\r\n            />\r\n          ) : (\r\n            <p>Select a student first.</p>\r\n          );\r\n        case 3:\r\n          return selectedStudent && feesData ? (\r\n            <Step3PaymentInfo\r\n              selectedStudent={selectedStudent}\r\n              selectedStatus={selectedStatus}\r\n              onStatusChange={setSelectedStatus}\r\n              selectedMonths={selectedMonths}\r\n              onSelectPayment={setFeesData}\r\n            />\r\n          ) : (\r\n            <p>Loading payment info...</p>\r\n          );\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n      <div className=\"modal-overlay\">\r\n        <div className=\"modal-content student-fee-entry-modal\">\r\n          <div className=\"modal-header\">\r\n            <h2>Student Fee Entry</h2>\r\n            <button className=\"close-btn\" onClick={onClose}>×</button>\r\n          </div>\r\n          <StepperHeader currentStep={currentStep} />\r\n          <div className=\"modal-body\">{renderStepContent()}</div>\r\n          <div className=\"modal-footer\">\r\n            {currentStep > 1 && (\r\n              <button className=\"prev-btn\" onClick={handlePrev} disabled={isSubmitting}>\r\n                Previous\r\n              </button>\r\n            )}\r\n            {currentStep < 3 ? (\r\n              <button\r\n                className=\"next-btn\"\r\n                onClick={handleNext}\r\n                disabled={(currentStep === 1 && !selectedStudent) || (currentStep === 2 && selectedMonths.length === 0) || isSubmitting}\r\n              >\r\n                Next\r\n              </button>\r\n            ) : (\r\n              <button\r\n                className=\"submit-btn\"\r\n                onClick={handleSubmit}\r\n                disabled={!selectedStudent || !feesData || selectedMonths.length === 0 || isSubmitting}\r\n              >\r\n                {isSubmitting ? 'Submitting...' : 'Submit Payment'}\r\n              </button>\r\n            )}\r\n          </div>\r\n          {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"payment-header\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search...\"\r\n          className=\"search-bar\"\r\n          value={searchQuery}\r\n          onChange={(e) => setSearchQuery(e.target.value)}\r\n        />\r\n        <button className=\"add-payment-btn\" onClick={handleAddPayment}>\r\n          + Add Payment\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"filter-controls-container\">\r\n        <div className=\"filter-dropdown-container\" ref={stateDropdownRef}>\r\n          <button\r\n            className={`filter-dropdown-btn ${isStateDropdownOpen ? 'open' : ''}`}\r\n            onClick={handleStateDropdownToggle}\r\n            type=\"button\"\r\n          >\r\n            <span>{selectedStateOption.label}</span>\r\n            <svg\r\n              className={`dropdown-arrow ${isStateDropdownOpen ? 'rotated' : ''}`}\r\n              width=\"12\"\r\n              height=\"8\"\r\n              viewBox=\"0 0 12 8\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                d=\"M1 1.5L6 6.5L11 1.5\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n              />\r\n            </svg>\r\n          </button>\r\n          {isStateDropdownOpen && (\r\n            <div className=\"filter-dropdown-menu\">\r\n              {stateOptions.map((option) => (\r\n                <div\r\n                  key={option.value}\r\n                  className={`filter-dropdown-item ${selectedState === option.value ? 'selected' : ''}`}\r\n                  onClick={() => handleStateSelect(option)}\r\n                >\r\n                  {option.label}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"table-container\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              {selectedStatus === 'Pending' ? (\r\n                <>\r\n                  <th>Name</th>\r\n                  <th>Amount (Rs)</th>\r\n                  <th>Pending</th>\r\n                  <th>\r\n                    <div className=\"status-filter-container\" ref={statusDropdownRef}>\r\n                      Status\r\n                      <img\r\n                        src={filterIcon}\r\n                        alt=\"Filter\"\r\n                        className=\"icon filter-icon\"\r\n                        onClick={handleStatusDropdownToggle}\r\n                      />\r\n                      {isStatusDropdownOpen && (\r\n                        <div className=\"status-dropdown-menu\">\r\n                          {statusOptions.map((option) => (\r\n                            <div\r\n                              key={option.value}\r\n                              className={`status-dropdown-item ${selectedStatus === option.value ? 'selected' : ''}`}\r\n                              onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                handleStatusSelect(option);\r\n                              }}\r\n                            >\r\n                              {option.label}\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </th>\r\n                  <th>Action</th>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <th>Name</th>\r\n                  <th>Pay Date</th>\r\n                  <th>Amount (Rs)</th>\r\n                  <th>\r\n                    <div className=\"status-filter-container\" ref={statusDropdownRef}>\r\n                      Status\r\n                      <img\r\n                        src={filterIcon}\r\n                        alt=\"Filter\"\r\n                        className=\"icon filter-icon\"\r\n                        onClick={handleStatusDropdownToggle}\r\n                      />\r\n                      {isStatusDropdownOpen && (\r\n                        <div className=\"status-dropdown-menu\">\r\n                          {statusOptions.map((option) => (\r\n                            <div\r\n                              key={option.value}\r\n                              className={`status-dropdown-item ${selectedStatus === option.value ? 'selected' : ''}`}\r\n                              onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                handleStatusSelect(option);\r\n                              }}\r\n                            >\r\n                              {option.label}\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </th>\r\n                  <th>Action</th>\r\n                </>\r\n              )}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {getFilteredPayments().map((payment) => (\r\n              <tr key={payment.id}>\r\n                {selectedStatus === 'Pending' ? (\r\n                  <>\r\n                    <td>{payment.full_name || payment.name || 'Unknown Name'}</td>\r\n                    <td>{payment.amount.toLocaleString('en-US') || 0}</td>\r\n                    <td>{payment.pendingDuration}</td>\r\n                    <td>\r\n                      <span className={payment.status === 'Paid' ? 'status-paid' : 'status-pending'}>\r\n                        {payment.status || 'Unknown'}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"action-icons\">\r\n                      <img\r\n                        src={eyeIcon}\r\n                        alt=\"View\"\r\n                        className=\"icon\"\r\n                        onClick={() => handleIconClick('View', payment.id)}\r\n                        title=\"View Details\"\r\n                      />\r\n                    </td>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <td>{payment.full_name || payment.name || 'Unknown Name'}</td>\r\n                    <td>{payment.formattedPayDate}</td>\r\n                    <td>{payment.amount.toLocaleString('en-US') || 0}</td>\r\n                    <td>\r\n                      <span className={payment.status === 'Paid' ? 'status-paid' : 'status-pending'}>\r\n                        {payment.status || 'Unknown'}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"action-icons\">\r\n                      <img\r\n                        src={eyeIcon}\r\n                        alt=\"View\"\r\n                        className=\"icon\"\r\n                        onClick={() => handleIconClick('View', payment.id)}\r\n                        title=\"View Details\"\r\n                      />\r\n                    </td>\r\n                  </>\r\n                )}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        {isLoading && (\r\n          <div className=\"loading-indicator\">\r\n            <p>Loading payments...</p>\r\n          </div>\r\n        )}\r\n        {!isLoading && getFilteredPayments().length === 0 && (\r\n          <div className=\"no-data\">\r\n            <p>No payments found for the selected filters.</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <PaymentDetailsModal\r\n        isOpen={isModalOpen}\r\n        onClose={closeModal}\r\n        paymentData={selectedPayment}\r\n        key={selectedPayment?.id}\r\n      />\r\n      <StudentFeeStepperModal\r\n        isOpen={isStepperOpen}\r\n        onClose={closeStepper}\r\n        onPaymentSuccess={handlePaymentSuccess}\r\n      />\r\n      <PaymentSuccessModal\r\n        isOpen={isSuccessModalOpen}\r\n        onClose={closeSuccessModal}\r\n        onGenerateReceipt={() => handleGenerateReceipt(receiptData?.student_details_id)}\r\n        receiptData={receiptData}\r\n      />\r\n      <Receipt\r\n        isOpen={isReceiptOpen}\r\n        onClose={closeReceipt}\r\n        receiptData={receiptData}\r\n      />\r\n      <PendingModal\r\n        isOpen={isPendingModalOpen}\r\n        onClose={closePendingModal}\r\n        paymentData={selectedPayment}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PaymentTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
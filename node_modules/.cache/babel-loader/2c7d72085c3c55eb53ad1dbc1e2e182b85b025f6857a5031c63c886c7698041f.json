{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'https://pineappleai.cloud/api/sms/api';\nconst IMAGE_BASE_URL = 'https://pineappleai.cloud/uploads/students/';\nexport const getDropdownOptions = async (type, params = {}) => {\n  try {\n    let url;\n    switch (type) {\n      case 'courses':\n        url = `${API_URL}/courses`;\n        break;\n      case 'grades':\n        if (!params.courseId) throw new Error('Course ID is required');\n        url = `${API_URL}/courses/course/${params.courseId}/grades`;\n        break;\n      case 'branches':\n        url = `${API_URL}/branches`;\n        break;\n      case 'slots':\n        if (!params.branchId || !params.courseId || !params.gradeId) {\n          throw new Error('branchId, courseId, and gradeId are all required for slot fetching');\n        }\n        url = `${API_URL}/slots/available?branchId=${params.branchId}&courseId=${params.courseId}&gradeId=${params.gradeId}`;\n        break;\n      default:\n        throw new Error(`Invalid dropdown type: ${type}`);\n    }\n    const response = await axios.get(url);\n    let data = response.data;\n    if (type === 'slots') {\n      data = data.map(slot => ({\n        id: slot.id,\n        branch_id: slot.branch_id,\n        day: slot.day,\n        time: `${slot.start_time || slot.st_time}-${slot.end_time}`\n      }));\n    }\n    return data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(`Error fetching ${type}:`, error.message);\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || `Failed to fetch ${type}`);\n  }\n};\nexport const getStudentSlots = async studentId => {\n  try {\n    const response = await axios.get(`${API_URL}/students/${studentId}/slots`);\n    console.log(`Slots response for student ${studentId}:`, JSON.stringify(response.data, null, 2));\n    return response.data.map(slot => {\n      const day = slot.day || 'N/A';\n      const startTime = slot.st_time || '';\n      const endTime = slot.end_time || '';\n      const time = startTime && endTime ? `${startTime}-${endTime}` : 'N/A';\n      return {\n        id: slot.id || Date.now(),\n        day,\n        time,\n        branch_id: slot.branch_id || null,\n        course_id: slot.course_id || null,\n        grade_id: slot.grade_id || null\n      };\n    });\n  } catch (error) {\n    var _error$response2, _error$response3;\n    console.error(`Error fetching student slots for ${studentId}:`, {\n      message: error.message,\n      status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n      data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data\n    });\n    return [];\n  }\n};\nexport const getStudentBranches = async studentId => {\n  try {\n    const response = await axios.get(`${API_URL}/students/${studentId}/branches`);\n    console.log(`Branches response for student ${studentId}:`, JSON.stringify(response.data, null, 2));\n    return response.data.map(branch => ({\n      id: branch.id || null,\n      branch_name: branch.branch_name || 'N/A'\n    }));\n  } catch (error) {\n    var _error$response4, _error$response5;\n    console.error(`Error fetching student branches for ${studentId}:`, {\n      message: error.message,\n      status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status,\n      data: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data\n    });\n    return [];\n  }\n};\nexport const createStudent = async data => {\n  try {\n    var _response$data$studen;\n    const studentDetails = JSON.parse(data.get('student_details') || '{}');\n    if (!studentDetails.student_no) {\n      throw new Error('student_no is required in student_details');\n    }\n    console.log('Sending student creation payload:', data);\n    const response = await axios.post(`${API_URL}/students/finalize`, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    console.log('Student creation response:', JSON.stringify(response.data, null, 2));\n    const studentId = response.data.user_id || response.data.id || ((_response$data$studen = response.data.student) === null || _response$data$studen === void 0 ? void 0 : _response$data$studen.id) || response.data.student_id;\n    if (!studentId) {\n      throw new Error('Student ID not found in response');\n    }\n    const [grades, slots, branches] = await Promise.all([axios.get(`${API_URL}/courses/student/${studentId}/grades`), getStudentSlots(studentId), getStudentBranches(studentId)]);\n    const courses = await axios.get(`${API_URL}/courses`);\n    const courseMap = new Map(courses.data.map(c => [c.id, c.name]));\n    const assignedCourses = grades.data.map(grade => {\n      var _grade$Grade, _grade$Grade$Course, _grade$Grade2;\n      return {\n        course: courseMap.get((_grade$Grade = grade.Grade) === null || _grade$Grade === void 0 ? void 0 : (_grade$Grade$Course = _grade$Grade.Course) === null || _grade$Grade$Course === void 0 ? void 0 : _grade$Grade$Course.id) || 'N/A',\n        grade: ((_grade$Grade2 = grade.Grade) === null || _grade$Grade2 === void 0 ? void 0 : _grade$Grade2.grade_name) || 'N/A'\n      };\n    });\n    const userDetails = JSON.parse(data.get('user') || '{}');\n    const photoUrl = response.data.photo_url ? `${IMAGE_BASE_URL}${response.data.photo_url}` : '/default-avatar.png';\n    return {\n      ...response.data,\n      user_id: studentId,\n      ...userDetails,\n      ...studentDetails,\n      photo_url: photoUrl,\n      assignedCourses,\n      schedules: slots,\n      branch: branches.length > 0 ? branches[0].branch_name : 'N/A'\n    };\n  } catch (error) {\n    var _error$response6, _error$response7, _error$response7$data;\n    console.error('Error creating student:', ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || 'Failed to create student');\n  }\n};\nexport const createStudentWithOptionalPhoto = async data => {\n  try {\n    const createRes = await createStudent(data);\n    console.log('createStudent result:', createRes);\n    if (!createRes.user_id) {\n      console.error('No user_id found in createStudent response');\n      throw new Error('Failed to retrieve student ID');\n    }\n    return createRes;\n  } catch (error) {\n    console.error('Error in createStudentWithOptionalPhoto:', error);\n    throw error;\n  }\n};\nexport const uploadStudentPhoto = async (userId, photoFile) => {\n  try {\n    if (!userId) {\n      throw new Error('userId is undefined');\n    }\n    console.log('Uploading photo for userId:', userId);\n    const formData = new FormData();\n    formData.append('photo', photoFile);\n    const response = await axios.post(`${API_URL}/students/${userId}/photo`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    console.log('Photo uploaded successfully:', response.data);\n    const photoUrl = response.data.photo_url ? `${IMAGE_BASE_URL}${response.data.photo_url}` : '/default-avatar.png';\n    return {\n      ...response.data,\n      photo_url: photoUrl\n    };\n  } catch (error) {\n    var _error$response8, _error$response9, _error$response9$data;\n    console.error('Error uploading photo:', ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message);\n    throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.error) || 'Failed to upload photo');\n  }\n};\nexport const updateStudent = async (userId, data) => {\n  try {\n    // Ensure data is a FormData object\n    const formData = data instanceof FormData ? data : new FormData();\n\n    // Parse existing student_details and user for merging\n    const studentDetails = JSON.parse(formData.get('student_details') || '{}');\n    const userDetails = JSON.parse(formData.get('user') || '{}');\n\n    // Add grade_ids and slot_ids if provided\n    if (data.grade_ids) {\n      formData.append('grade_ids', JSON.stringify(data.grade_ids));\n    }\n    if (data.slot_ids) {\n      formData.append('slot_ids', JSON.stringify(data.slot_ids));\n    }\n    const response = await axios.patch(`${API_URL}/students/${userId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n\n    // Fetch updated data\n    const [grades, slots, branches] = await Promise.all([axios.get(`${API_URL}/courses/student/${userId}/grades`), getStudentSlots(userId), getStudentBranches(userId)]);\n    const courses = await axios.get(`${API_URL}/courses`);\n    const courseMap = new Map(courses.data.map(c => [c.id, c.name]));\n    const assignedCourses = grades.data.map(grade => {\n      var _grade$Grade3, _grade$Grade3$Course, _grade$Grade4;\n      return {\n        course: courseMap.get((_grade$Grade3 = grade.Grade) === null || _grade$Grade3 === void 0 ? void 0 : (_grade$Grade3$Course = _grade$Grade3.Course) === null || _grade$Grade3$Course === void 0 ? void 0 : _grade$Grade3$Course.id) || 'N/A',\n        grade: ((_grade$Grade4 = grade.Grade) === null || _grade$Grade4 === void 0 ? void 0 : _grade$Grade4.grade_name) || 'N/A'\n      };\n    });\n    const photoUrl = response.data.photo_url || studentDetails.photo_url ? `${IMAGE_BASE_URL}${response.data.photo_url || studentDetails.photo_url}` : '/default-avatar.png';\n    return {\n      ...response.data,\n      user_id: userId,\n      ...userDetails,\n      ...studentDetails,\n      photo_url: photoUrl,\n      assignedCourses,\n      schedules: slots,\n      branch: branches.length > 0 ? branches[0].branch_name : 'N/A'\n    };\n  } catch (error) {\n    var _error$response0, _error$response1, _error$response1$data;\n    console.error('Error updating student:', ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || error.message);\n    throw new Error(((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.error) || 'Failed to update student');\n  }\n};\nexport const getAllStudents = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/users?role=student`);\n    const courses = await axios.get(`${API_URL}/courses`);\n    const courseMap = new Map(courses.data.map(c => [c.id, (c.name || 'N/A').trim().toLowerCase()]));\n    console.log('getAllStudents: Course map:', Array.from(courseMap.entries()));\n    const students = await Promise.all(response.data.map(async student => {\n      try {\n        var _profile$data$Student, _profile$data$Student2, _profile$data$Student3, _profile$data$Student4, _profile$data$Student5, _profile$data$Student6, _profile$data$Student7, _profile$data$Student8;\n        const [profile, grades, slots, branches] = await Promise.all([axios.get(`${API_URL}/students/${student.id}/profile`), axios.get(`${API_URL}/courses/student/${student.id}/grades`), getStudentSlots(student.id), getStudentBranches(student.id)]);\n        console.log(`Branches for student ${student.id}:`, branches);\n        console.log(`Slots for student ${student.id}:`, slots);\n        console.log(`Grades for student ${student.id}:`, grades.data);\n        const courseNames = grades.data.map(grade => {\n          var _grade$Grade5, _grade$Grade5$Course;\n          return courseMap.get((_grade$Grade5 = grade.Grade) === null || _grade$Grade5 === void 0 ? void 0 : (_grade$Grade5$Course = _grade$Grade5.Course) === null || _grade$Grade5$Course === void 0 ? void 0 : _grade$Grade5$Course.id);\n        }).filter(Boolean);\n        const photoUrl = (_profile$data$Student = profile.data.StudentDetail) !== null && _profile$data$Student !== void 0 && _profile$data$Student.photo_url ? `${IMAGE_BASE_URL}${profile.data.StudentDetail.photo_url}` : '/default-avatar.png';\n        console.log(photoUrl);\n        const studentData = {\n          ...student,\n          student_no: ((_profile$data$Student2 = profile.data.StudentDetail) === null || _profile$data$Student2 === void 0 ? void 0 : _profile$data$Student2.student_no) || 'N/A',\n          photo_url: photoUrl,\n          salutation: ((_profile$data$Student3 = profile.data.StudentDetail) === null || _profile$data$Student3 === void 0 ? void 0 : _profile$data$Student3.salutation) || '',\n          phn_num: student.phn_num || ((_profile$data$Student4 = profile.data.StudentDetail) === null || _profile$data$Student4 === void 0 ? void 0 : _profile$data$Student4.phn_num) || 'N/A',\n          ice_contact: ((_profile$data$Student5 = profile.data.StudentDetail) === null || _profile$data$Student5 === void 0 ? void 0 : _profile$data$Student5.ice_contact) || student.ice_contact || 'N/A',\n          student_details: {\n            student_no: ((_profile$data$Student6 = profile.data.StudentDetail) === null || _profile$data$Student6 === void 0 ? void 0 : _profile$data$Student6.student_no) || 'N/A',\n            photo_url: photoUrl,\n            salutation: ((_profile$data$Student7 = profile.data.StudentDetail) === null || _profile$data$Student7 === void 0 ? void 0 : _profile$data$Student7.salutation) || '',\n            ice_contact: ((_profile$data$Student8 = profile.data.StudentDetail) === null || _profile$data$Student8 === void 0 ? void 0 : _profile$data$Student8.ice_contact) || student.ice_contact || 'N/A'\n          },\n          status: (student.status || 'active').trim().toLowerCase(),\n          course: courseNames.length > 0 ? courseNames.join(', ') : 'N/A',\n          assignedCourses: grades.data.length > 0 ? grades.data.map(grade => {\n            var _grade$Grade6, _grade$Grade6$Course, _grade$Grade7, _grade$Grade8, _grade$Grade8$Course, _grade$Grade9;\n            return {\n              course: courseMap.get((_grade$Grade6 = grade.Grade) === null || _grade$Grade6 === void 0 ? void 0 : (_grade$Grade6$Course = _grade$Grade6.Course) === null || _grade$Grade6$Course === void 0 ? void 0 : _grade$Grade6$Course.id) || 'N/A',\n              grade: ((_grade$Grade7 = grade.Grade) === null || _grade$Grade7 === void 0 ? void 0 : _grade$Grade7.grade_name) || 'N/A',\n              course_id: ((_grade$Grade8 = grade.Grade) === null || _grade$Grade8 === void 0 ? void 0 : (_grade$Grade8$Course = _grade$Grade8.Course) === null || _grade$Grade8$Course === void 0 ? void 0 : _grade$Grade8$Course.id) || null,\n              grade_id: ((_grade$Grade9 = grade.Grade) === null || _grade$Grade9 === void 0 ? void 0 : _grade$Grade9.id) || null\n            };\n          }) : [],\n          schedules: slots || [],\n          branch: branches.length > 0 ? branches[0].branch_name : 'N/A'\n        };\n        console.log(`Student ${student.id} data:`, studentData);\n        return studentData;\n      } catch (error) {\n        console.error(`Failed to fetch profile or grades for student ${student.id}:`, error);\n        return {\n          ...student,\n          student_no: 'N/A',\n          photo_url: '/default-avatar.png',\n          salutation: '',\n          phn_num: student.phn_num || 'N/A',\n          ice_contact: student.ice_contact || 'N/A',\n          student_details: {\n            student_no: 'N/A',\n            photo_url: '/default-avatar.png',\n            salutation: '',\n            ice_contact: student.ice_contact || 'N/A'\n          },\n          status: (student.status || 'active').trim().toLowerCase(),\n          course: 'N/A',\n          assignedCourses: [],\n          schedules: [],\n          branch: 'N/A'\n        };\n      }\n    }));\n    console.log('getAllStudents: Final students list:', students);\n    return students;\n  } catch (error) {\n    var _error$response10, _error$response10$dat;\n    console.error('Error fetching students:', error);\n    throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.error) || 'Failed to fetch students');\n  }\n};\nexport const deleteStudent = async userId => {\n  try {\n    const response = await axios.delete(`${API_URL}/students/${userId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response11, _error$response11$dat;\n    console.error('Error deleting student:', error.message);\n    throw new Error(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.error) || 'Failed to delete student');\n  }\n};\nexport const searchStudents = async query => {\n  try {\n    const students = await getAllStudents();\n    if (!query) return students;\n    return students.filter(student => {\n      var _student$name, _student$email;\n      return ((_student$name = student.name) === null || _student$name === void 0 ? void 0 : _student$name.toLowerCase().includes(query.toLowerCase())) || ((_student$email = student.email) === null || _student$email === void 0 ? void 0 : _student$email.toLowerCase().includes(query.toLowerCase()));\n    });\n  } catch (error) {\n    console.error('Error searching students:', error.message);\n    throw new Error(error.message || 'Failed to search students');\n  }\n};\nexport const filterStudents = async filters => {\n  try {\n    const students = await getAllStudents();\n    return students.filter(student => {\n      const matchesStatus = filters.status ? student.status === filters.status : true;\n      return matchesStatus;\n    });\n  } catch (error) {\n    console.error('Error filtering students:', error.message);\n    throw new Error(error.message || 'Failed to filter students');\n  }\n};\nexport const filterStudentsByCourse = async courseId => {\n  try {\n    const students = await getAllStudents();\n    return students;\n  } catch (error) {\n    console.error('Error filtering students by course:', error.message);\n    throw new Error(error.message || 'Failed to filter students by course');\n  }\n};","map":{"version":3,"names":["axios","API_URL","IMAGE_BASE_URL","getDropdownOptions","type","params","url","courseId","Error","branchId","gradeId","response","get","data","map","slot","id","branch_id","day","time","start_time","st_time","end_time","error","_error$response","_error$response$data","console","message","getStudentSlots","studentId","log","JSON","stringify","startTime","endTime","Date","now","course_id","grade_id","_error$response2","_error$response3","status","getStudentBranches","branch","branch_name","_error$response4","_error$response5","createStudent","_response$data$studen","studentDetails","parse","student_no","post","headers","user_id","student","student_id","grades","slots","branches","Promise","all","courses","courseMap","Map","c","name","assignedCourses","grade","_grade$Grade","_grade$Grade$Course","_grade$Grade2","course","Grade","Course","grade_name","userDetails","photoUrl","photo_url","schedules","length","_error$response6","_error$response7","_error$response7$data","createStudentWithOptionalPhoto","createRes","uploadStudentPhoto","userId","photoFile","formData","FormData","append","_error$response8","_error$response9","_error$response9$data","updateStudent","grade_ids","slot_ids","patch","_grade$Grade3","_grade$Grade3$Course","_grade$Grade4","_error$response0","_error$response1","_error$response1$data","getAllStudents","trim","toLowerCase","Array","from","entries","students","_profile$data$Student","_profile$data$Student2","_profile$data$Student3","_profile$data$Student4","_profile$data$Student5","_profile$data$Student6","_profile$data$Student7","_profile$data$Student8","profile","courseNames","_grade$Grade5","_grade$Grade5$Course","filter","Boolean","StudentDetail","studentData","salutation","phn_num","ice_contact","student_details","join","_grade$Grade6","_grade$Grade6$Course","_grade$Grade7","_grade$Grade8","_grade$Grade8$Course","_grade$Grade9","_error$response10","_error$response10$dat","deleteStudent","delete","_error$response11","_error$response11$dat","searchStudents","query","_student$name","_student$email","includes","email","filterStudents","filters","matchesStatus","filterStudentsByCourse"],"sources":["C:/Users/Admin/Desktop/SMS Final Final Code K/Frontend/src/integration/studentAPI.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'https://pineappleai.cloud/api/sms/api';\r\nconst IMAGE_BASE_URL = 'https://pineappleai.cloud/uploads/students/';\r\n\r\nexport const getDropdownOptions = async (type, params = {}) => {\r\n  try {\r\n    let url;\r\n    switch (type) {\r\n      case 'courses':\r\n        url = `${API_URL}/courses`;\r\n        break;\r\n      case 'grades':\r\n        if (!params.courseId) throw new Error('Course ID is required');\r\n        url = `${API_URL}/courses/course/${params.courseId}/grades`;\r\n        break;\r\n      case 'branches':\r\n        url = `${API_URL}/branches`;\r\n        break;\r\n      case 'slots':\r\n        if (!params.branchId || !params.courseId || !params.gradeId) {\r\n          throw new Error('branchId, courseId, and gradeId are all required for slot fetching');\r\n        }\r\n        url = `${API_URL}/slots/available?branchId=${params.branchId}&courseId=${params.courseId}&gradeId=${params.gradeId}`;\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid dropdown type: ${type}`);\r\n    }\r\n\r\n    const response = await axios.get(url);\r\n    let data = response.data;\r\n\r\n    if (type === 'slots') {\r\n      data = data.map(slot => ({\r\n        id: slot.id,\r\n        branch_id: slot.branch_id,\r\n        day: slot.day,\r\n        time: `${slot.start_time || slot.st_time}-${slot.end_time}`,\r\n      }));\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error fetching ${type}:`, error.message);\r\n    throw new Error(error.response?.data?.error || `Failed to fetch ${type}`);\r\n  }\r\n};\r\n\r\nexport const getStudentSlots = async (studentId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/students/${studentId}/slots`);\r\n    console.log(`Slots response for student ${studentId}:`, JSON.stringify(response.data, null, 2));\r\n    return response.data.map(slot => {\r\n      const day = slot.day || 'N/A';\r\n      const startTime = slot.st_time || '';\r\n      const endTime = slot.end_time || '';\r\n      const time = startTime && endTime ? `${startTime}-${endTime}` : 'N/A';\r\n      return {\r\n        id: slot.id || Date.now(),\r\n        day,\r\n        time,\r\n        branch_id: slot.branch_id || null,\r\n        course_id: slot.course_id || null,\r\n        grade_id: slot.grade_id || null,\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error(`Error fetching student slots for ${studentId}:`, {\r\n      message: error.message,\r\n      status: error.response?.status,\r\n      data: error.response?.data,\r\n    });\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getStudentBranches = async (studentId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/students/${studentId}/branches`);\r\n    console.log(`Branches response for student ${studentId}:`, JSON.stringify(response.data, null, 2));\r\n    return response.data.map(branch => ({\r\n      id: branch.id || null,\r\n      branch_name: branch.branch_name || 'N/A',\r\n    }));\r\n  } catch (error) {\r\n    console.error(`Error fetching student branches for ${studentId}:`, {\r\n      message: error.message,\r\n      status: error.response?.status,\r\n      data: error.response?.data,\r\n    });\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const createStudent = async (data) => {\r\n  try {\r\n    const studentDetails = JSON.parse(data.get('student_details') || '{}');\r\n    if (!studentDetails.student_no) {\r\n      throw new Error('student_no is required in student_details');\r\n    }\r\n\r\n    console.log('Sending student creation payload:', data);\r\n\r\n    const response = await axios.post(`${API_URL}/students/finalize`, data, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n    console.log('Student creation response:', JSON.stringify(response.data, null, 2));\r\n\r\n    const studentId = response.data.user_id || response.data.id || response.data.student?.id || response.data.student_id;\r\n    if (!studentId) {\r\n      throw new Error('Student ID not found in response');\r\n    }\r\n\r\n    const [grades, slots, branches] = await Promise.all([\r\n      axios.get(`${API_URL}/courses/student/${studentId}/grades`),\r\n      getStudentSlots(studentId),\r\n      getStudentBranches(studentId),\r\n    ]);\r\n\r\n    const courses = await axios.get(`${API_URL}/courses`);\r\n    const courseMap = new Map(courses.data.map(c => [c.id, c.name]));\r\n\r\n    const assignedCourses = grades.data.map(grade => ({\r\n      course: courseMap.get(grade.Grade?.Course?.id) || 'N/A',\r\n      grade: grade.Grade?.grade_name || 'N/A',\r\n    }));\r\n\r\n    const userDetails = JSON.parse(data.get('user') || '{}');\r\n\r\n        const photoUrl = response.data.photo_url\r\n      ? `${IMAGE_BASE_URL}${response.data.photo_url}`\r\n      : '/default-avatar.png';\r\n\r\n    return {\r\n      ...response.data,\r\n      user_id: studentId,\r\n      ...userDetails,\r\n      ...studentDetails,\r\n      photo_url: photoUrl,\r\n      assignedCourses,\r\n      schedules: slots,\r\n      branch: branches.length > 0 ? branches[0].branch_name : 'N/A',\r\n    };\r\n  } catch (error) {\r\n    console.error('Error creating student:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.error || 'Failed to create student');\r\n  }\r\n};\r\n\r\nexport const createStudentWithOptionalPhoto = async (data) => {\r\n  try {\r\n    const createRes = await createStudent(data);\r\n    console.log('createStudent result:', createRes);\r\n\r\n    if (!createRes.user_id) {\r\n      console.error('No user_id found in createStudent response');\r\n      throw new Error('Failed to retrieve student ID');\r\n    }\r\n\r\n    return createRes;\r\n  } catch (error) {\r\n    console.error('Error in createStudentWithOptionalPhoto:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const uploadStudentPhoto = async (userId, photoFile) => {\r\n  try {\r\n    if (!userId) {\r\n      throw new Error('userId is undefined');\r\n    }\r\n    console.log('Uploading photo for userId:', userId);\r\n    const formData = new FormData();\r\n    formData.append('photo', photoFile);\r\n\r\n    const response = await axios.post(`${API_URL}/students/${userId}/photo`, formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n\r\n    console.log('Photo uploaded successfully:', response.data);\r\n    const photoUrl = response.data.photo_url\r\n      ? `${IMAGE_BASE_URL}${response.data.photo_url}`\r\n      : '/default-avatar.png';\r\n    return { ...response.data, photo_url: photoUrl };\r\n  } catch (error) {\r\n    console.error('Error uploading photo:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.error || 'Failed to upload photo');\r\n  }\r\n};\r\n\r\nexport const updateStudent = async (userId, data) => {\r\n  try {\r\n    // Ensure data is a FormData object\r\n    const formData = data instanceof FormData ? data : new FormData();\r\n    \r\n    // Parse existing student_details and user for merging\r\n    const studentDetails = JSON.parse(formData.get('student_details') || '{}');\r\n    const userDetails = JSON.parse(formData.get('user') || '{}');\r\n    \r\n    // Add grade_ids and slot_ids if provided\r\n    if (data.grade_ids) {\r\n      formData.append('grade_ids', JSON.stringify(data.grade_ids));\r\n    }\r\n    if (data.slot_ids) {\r\n      formData.append('slot_ids', JSON.stringify(data.slot_ids));\r\n    }\r\n\r\n    const response = await axios.patch(`${API_URL}/students/${userId}`, formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n\r\n    // Fetch updated data\r\n    const [grades, slots, branches] = await Promise.all([\r\n      axios.get(`${API_URL}/courses/student/${userId}/grades`),\r\n      getStudentSlots(userId),\r\n      getStudentBranches(userId),\r\n    ]);\r\n\r\n    const courses = await axios.get(`${API_URL}/courses`);\r\n    const courseMap = new Map(courses.data.map(c => [c.id, c.name]));\r\n\r\n    const assignedCourses = grades.data.map(grade => ({\r\n      course: courseMap.get(grade.Grade?.Course?.id) || 'N/A',\r\n      grade: grade.Grade?.grade_name || 'N/A',\r\n    }));\r\n\r\n      const photoUrl = response.data.photo_url || studentDetails.photo_url\r\n      ? `${IMAGE_BASE_URL}${response.data.photo_url || studentDetails.photo_url}`\r\n      : '/default-avatar.png';\r\n\r\n    return {\r\n      ...response.data,\r\n      user_id: userId,\r\n      ...userDetails,\r\n      ...studentDetails,\r\n      photo_url:photoUrl,\r\n      assignedCourses,\r\n      schedules: slots,\r\n      branch: branches.length > 0 ? branches[0].branch_name : 'N/A',\r\n    };\r\n  } catch (error) {\r\n    console.error('Error updating student:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.error || 'Failed to update student');\r\n  }\r\n};\r\n\r\nexport const getAllStudents = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/users?role=student`);\r\n    const courses = await axios.get(`${API_URL}/courses`);\r\n    const courseMap = new Map(courses.data.map(c => [c.id, (c.name || 'N/A').trim().toLowerCase()]));\r\n    console.log('getAllStudents: Course map:', Array.from(courseMap.entries()));\r\n\r\n    const students = await Promise.all(\r\n      response.data.map(async (student) => {\r\n        try {\r\n          const [profile, grades, slots, branches] = await Promise.all([\r\n            axios.get(`${API_URL}/students/${student.id}/profile`),\r\n            axios.get(`${API_URL}/courses/student/${student.id}/grades`),\r\n            getStudentSlots(student.id),\r\n            getStudentBranches(student.id),\r\n          ]);\r\n\r\n          console.log(`Branches for student ${student.id}:`, branches);\r\n          console.log(`Slots for student ${student.id}:`, slots);\r\n          console.log(`Grades for student ${student.id}:`, grades.data);\r\n\r\n          const courseNames = grades.data\r\n            .map(grade => courseMap.get(grade.Grade?.Course?.id))\r\n            .filter(Boolean);\r\n\r\n           \r\n            const photoUrl = profile.data.StudentDetail?.photo_url\r\n            ? `${IMAGE_BASE_URL}${profile.data.StudentDetail.photo_url}`\r\n            : '/default-avatar.png';\r\n\r\n             console.log(photoUrl);\r\n\r\n          const studentData = {\r\n            ...student,\r\n            student_no: profile.data.StudentDetail?.student_no || 'N/A',\r\n            photo_url:photoUrl,\r\n            salutation: profile.data.StudentDetail?.salutation || '',\r\n            phn_num: student.phn_num || profile.data.StudentDetail?.phn_num || 'N/A',\r\n            ice_contact: profile.data.StudentDetail?.ice_contact || student.ice_contact || 'N/A',\r\n            student_details: {\r\n              student_no: profile.data.StudentDetail?.student_no || 'N/A',\r\n              photo_url: photoUrl,\r\n              salutation: profile.data.StudentDetail?.salutation || '',\r\n              ice_contact: profile.data.StudentDetail?.ice_contact || student.ice_contact || 'N/A',\r\n            },\r\n            status: (student.status || 'active').trim().toLowerCase(),\r\n            course: courseNames.length > 0 ? courseNames.join(', ') : 'N/A',\r\n            assignedCourses: grades.data.length > 0 ? grades.data.map(grade => ({\r\n              course: courseMap.get(grade.Grade?.Course?.id) || 'N/A',\r\n              grade: grade.Grade?.grade_name || 'N/A',\r\n              course_id: grade.Grade?.Course?.id || null,\r\n              grade_id: grade.Grade?.id || null,\r\n            })) : [],\r\n            schedules: slots || [],\r\n            branch: branches.length > 0 ? branches[0].branch_name : 'N/A',\r\n          };\r\n          console.log(`Student ${student.id} data:`, studentData);\r\n          return studentData;\r\n        } catch (error) {\r\n          console.error(`Failed to fetch profile or grades for student ${student.id}:`, error);\r\n          return {\r\n            ...student,\r\n            student_no: 'N/A',\r\n            photo_url: '/default-avatar.png',\r\n            salutation: '',\r\n            phn_num: student.phn_num || 'N/A',\r\n            ice_contact: student.ice_contact || 'N/A',\r\n            student_details: {\r\n              student_no: 'N/A',\r\n              photo_url: '/default-avatar.png',\r\n              salutation: '',\r\n              ice_contact: student.ice_contact || 'N/A',\r\n            },\r\n            status: (student.status || 'active').trim().toLowerCase(),\r\n            course: 'N/A',\r\n            assignedCourses: [],\r\n            schedules: [],\r\n            branch: 'N/A',\r\n          };\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log('getAllStudents: Final students list:', students);\r\n    return students;\r\n  } catch (error) {\r\n    console.error('Error fetching students:', error);\r\n    throw new Error(error.response?.data?.error || 'Failed to fetch students');\r\n  }\r\n};\r\n\r\nexport const deleteStudent = async (userId) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/students/${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error deleting student:', error.message);\r\n    throw new Error(error.response?.data?.error || 'Failed to delete student');\r\n  }\r\n};\r\n\r\nexport const searchStudents = async (query) => {\r\n  try {\r\n    const students = await getAllStudents();\r\n    if (!query) return students;\r\n    return students.filter(\r\n      (student) =>\r\n        student.name?.toLowerCase().includes(query.toLowerCase()) ||\r\n        student.email?.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n  } catch (error) {\r\n    console.error('Error searching students:', error.message);\r\n    throw new Error(error.message || 'Failed to search students');\r\n  }\r\n};\r\n\r\nexport const filterStudents = async (filters) => {\r\n  try {\r\n    const students = await getAllStudents();\r\n    return students.filter((student) => {\r\n      const matchesStatus = filters.status ? student.status === filters.status : true;\r\n      return matchesStatus;\r\n    });\r\n  } catch (error) {\r\n    console.error('Error filtering students:', error.message);\r\n    throw new Error(error.message || 'Failed to filter students');\r\n  }\r\n};\r\n\r\nexport const filterStudentsByCourse = async (courseId) => {\r\n  try {\r\n    const students = await getAllStudents();\r\n    return students;\r\n  } catch (error) {\r\n    console.error('Error filtering students by course:', error.message);\r\n    throw new Error(error.message || 'Failed to filter students by course');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}